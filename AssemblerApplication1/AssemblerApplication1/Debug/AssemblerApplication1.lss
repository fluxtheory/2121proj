
AVRASM ver. 2.2.6  C:\Users\Brandon\Desktop\UNI STUFF\comp 2121\2121proj\AssemblerApplication1\AssemblerApplication1\main.asm Thu Jun 01 18:16:32 2017

[builtin](2): Including file 'C:\Program Files (x86)\Atmel\AVR Tools\AvrAssembler2\Appnotes\m2560def.inc'
C:\Users\Brandon\Desktop\UNI STUFF\comp 2121\2121proj\AssemblerApplication1\AssemblerApplication1\main.asm(1): Including file 'C:\Program Files (x86)\Atmel\AVR Tools\AvrAssembler2\Appnotes\m2560def.inc'
[builtin](2): Including file 'C:\Program Files (x86)\Atmel\AVR Tools\AvrAssembler2\Appnotes\m2560def.inc'
C:\Users\Brandon\Desktop\UNI STUFF\comp 2121\2121proj\AssemblerApplication1\AssemblerApplication1\main.asm(1): Including file 'C:\Program Files (x86)\Atmel\AVR Tools\AvrAssembler2\Appnotes\m2560def.inc'
                                 
                                 .include "m2560def.inc"
                                 
                                 ;***** Created: 2011-08-25 20:59 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-08-25
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #define _M2560DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega2560
                                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x98
                                 .equ	SIGNATURE_002	= 0x01
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                                 .equ	PINL	= 0x109	; MEMORY MAPPED
                                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                                 .equ	PINK	= 0x106	; MEMORY MAPPED
                                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                                 .equ	PINH	= 0x100	; MEMORY MAPPED
                                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR5	= 0x1a
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTG	= 0x14
                                 .equ	DDRG	= 0x13
                                 .equ	PING	= 0x12
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 .equ	PORTG5	= 5	; 
                                 .equ	PG5	= 5	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 .equ	DDG5	= 5	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 .equ	PING5	= 5	; 
                                 
                                 
                                 ; ***** PORTH ************************
                                 ; PORTH - PORT H Data Register
                                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                                 .equ	PH0	= 0	; For compatibility
                                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                                 .equ	PH1	= 1	; For compatibility
                                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                                 .equ	PH2	= 2	; For compatibility
                                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                                 .equ	PH3	= 3	; For compatibility
                                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                                 .equ	PH4	= 4	; For compatibility
                                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                                 .equ	PH5	= 5	; For compatibility
                                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                                 .equ	PH6	= 6	; For compatibility
                                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                                 .equ	PH7	= 7	; For compatibility
                                 
                                 ; DDRH - PORT H Data Direction Register
                                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                                 
                                 ; PINH - PORT H Input Pins
                                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                                 
                                 
                                 ; ***** PORTJ ************************
                                 ; PORTJ - PORT J Data Register
                                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                                 .equ	PJ0	= 0	; For compatibility
                                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                                 .equ	PJ1	= 1	; For compatibility
                                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                                 .equ	PJ2	= 2	; For compatibility
                                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                                 .equ	PJ3	= 3	; For compatibility
                                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                                 .equ	PJ4	= 4	; For compatibility
                                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                                 .equ	PJ5	= 5	; For compatibility
                                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                                 .equ	PJ6	= 6	; For compatibility
                                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                                 .equ	PJ7	= 7	; For compatibility
                                 
                                 ; DDRJ - PORT J Data Direction Register
                                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                                 
                                 ; PINJ - PORT J Input Pins
                                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                                 
                                 
                                 ; ***** PORTK ************************
                                 ; PORTK - PORT K Data Register
                                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                                 .equ	PK0	= 0	; For compatibility
                                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                                 .equ	PK1	= 1	; For compatibility
                                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                                 .equ	PK2	= 2	; For compatibility
                                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                                 .equ	PK3	= 3	; For compatibility
                                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                                 .equ	PK4	= 4	; For compatibility
                                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                                 .equ	PK5	= 5	; For compatibility
                                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                                 .equ	PK6	= 6	; For compatibility
                                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                                 .equ	PK7	= 7	; For compatibility
                                 
                                 ; DDRK - PORT K Data Direction Register
                                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                                 
                                 ; PINK - PORT K Input Pins
                                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                                 
                                 
                                 ; ***** PORTL ************************
                                 ; PORTL - PORT L Data Register
                                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                                 .equ	PL0	= 0	; For compatibility
                                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                                 .equ	PL1	= 1	; For compatibility
                                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                                 .equ	PL2	= 2	; For compatibility
                                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                                 .equ	PL3	= 3	; For compatibility
                                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                                 .equ	PL4	= 4	; For compatibility
                                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                                 .equ	PL5	= 5	; For compatibility
                                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                                 .equ	PL6	= 6	; For compatibility
                                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                                 .equ	PL7	= 7	; For compatibility
                                 
                                 ; DDRL - PORT L Data Direction Register
                                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                                 
                                 ; PINL - PORT L Input Pins
                                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_5 **************
                                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                                 
                                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                                 .equ	ICF5	= 5	; Input Capture Flag 5
                                 
                                 ; TCCR5A - Timer/Counter5 Control Register A
                                 .equ	WGM50	= 0	; Waveform Generation Mode
                                 .equ	WGM51	= 1	; Waveform Generation Mode
                                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR5B - Timer/Counter5 Control Register B
                                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                                 .equ	WGM52	= 3	; Waveform Generation Mode
                                 .equ	WGM53	= 4	; Waveform Generation Mode
                                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                                 
                                 ; TCCR5C - Timer/Counter 5 Control Register C
                                 .equ	FOC5C	= 5	; Force Output Compare 5C
                                 .equ	FOC5B	= 6	; Force Output Compare 5B
                                 .equ	FOC5A	= 7	; Force Output Compare 5A
                                 
                                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                                 
                                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                                 .equ	ICF4	= 5	; Input Capture Flag 4
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0	; Waveform Generation Mode
                                 .equ	WGM41	= 1	; Waveform Generation Mode
                                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                                 .equ	WGM42	= 3	; Waveform Generation Mode
                                 .equ	WGM43	= 4	; Waveform Generation Mode
                                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	FOC4C	= 5	; Force Output Compare 4C
                                 .equ	FOC4B	= 6	; Force Output Compare 4B
                                 .equ	FOC4A	= 7	; Force Output Compare 4A
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW00	= 0	; Wait state select bit lower page
                                 .equ	SRW01	= 1	; Wait state select bit lower page
                                 .equ	SRW10	= 2	; Wait state select bit upper page
                                 .equ	SRW11	= 3	; Wait state select bit upper page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRUSART2	= 1	; Power Reduction USART2
                                 .equ	PRUSART3	= 2	; Power Reduction USART3
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register
                                 .equ	ADC8D	= 0	; 
                                 .equ	ADC9D	= 1	; 
                                 .equ	ADC10D	= 2	; 
                                 .equ	ADC11D	= 3	; 
                                 .equ	ADC12D	= 4	; 
                                 .equ	ADC13D	= 5	; 
                                 .equ	ADC14D	= 6	; 
                                 .equ	ADC15D	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** USART2 ***********************
                                 ; UDR2 - USART I/O Data Register
                                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR2A - USART Control and Status Register A
                                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                                 .equ	U2X2	= 1	; Double the USART transmission speed
                                 .equ	UPE2	= 2	; Parity Error
                                 .equ	DOR2	= 3	; Data overRun
                                 .equ	FE2	= 4	; Framing Error
                                 .equ	UDRE2	= 5	; USART Data Register Empty
                                 .equ	TXC2	= 6	; USART Transmitt Complete
                                 .equ	RXC2	= 7	; USART Receive Complete
                                 
                                 ; UCSR2B - USART Control and Status Register B
                                 .equ	TXB82	= 0	; Transmit Data Bit 8
                                 .equ	RXB82	= 1	; Receive Data Bit 8
                                 .equ	UCSZ22	= 2	; Character Size
                                 .equ	TXEN2	= 3	; Transmitter Enable
                                 .equ	RXEN2	= 4	; Receiver Enable
                                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR2C - USART Control and Status Register C
                                 .equ	UCPOL2	= 0	; Clock Polarity
                                 .equ	UCSZ20	= 1	; Character Size
                                 .equ	UCSZ21	= 2	; Character Size
                                 .equ	USBS2	= 3	; Stop Bit Select
                                 .equ	UPM20	= 4	; Parity Mode Bit 0
                                 .equ	UPM21	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL20	= 6	; USART Mode Select
                                 .equ	UMSEL21	= 7	; USART Mode Select
                                 
                                 ; UBRR2H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR2L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART3 ***********************
                                 ; UDR3 - USART I/O Data Register
                                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR3A - USART Control and Status Register A
                                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                                 .equ	U2X3	= 1	; Double the USART transmission speed
                                 .equ	UPE3	= 2	; Parity Error
                                 .equ	DOR3	= 3	; Data overRun
                                 .equ	FE3	= 4	; Framing Error
                                 .equ	UDRE3	= 5	; USART Data Register Empty
                                 .equ	TXC3	= 6	; USART Transmitt Complete
                                 .equ	RXC3	= 7	; USART Receive Complete
                                 
                                 ; UCSR3B - USART Control and Status Register B
                                 .equ	TXB83	= 0	; Transmit Data Bit 8
                                 .equ	RXB83	= 1	; Receive Data Bit 8
                                 .equ	UCSZ32	= 2	; Character Size
                                 .equ	TXEN3	= 3	; Transmitter Enable
                                 .equ	RXEN3	= 4	; Receiver Enable
                                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR3C - USART Control and Status Register C
                                 .equ	UCPOL3	= 0	; Clock Polarity
                                 .equ	UCSZ30	= 1	; Character Size
                                 .equ	UCSZ31	= 2	; Character Size
                                 .equ	USBS3	= 3	; Stop Bit Select
                                 .equ	UPM30	= 4	; Parity Mode Bit 0
                                 .equ	UPM31	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL30	= 6	; USART Mode Select
                                 .equ	UMSEL31	= 7	; USART Mode Select
                                 
                                 ; UBRR3H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR3L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                                 .equ	IOEND	= 0x01ff
                                 .equ	SRAM_START	= 0x0200
                                 .equ	SRAM_SIZE	= 8192
                                 .equ	RAMEND	= 0x21ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 262144
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1f000
                                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1efff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x1fe00
                                 .equ	SECONDBOOTSTART	= 0x1fc00
                                 .equ	THIRDBOOTSTART	= 0x1f800
                                 .equ	FOURTHBOOTSTART	= 0x1f000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                                 
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 
                                 ;***** Created: 2011-08-25 20:59 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-08-25
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 .dseg
                                 .macro do_lcd_command
                                 ldi r16, @0
                                 rcall lcd_command
                                 rcall lcd_wait
                                 .endmacro
                                 
                                 
                                 .macro do_lcd_data
                                 ldi r16, @0
                                 rcall lcd_data
                                 rcall lcd_wait
                                 .endmacro
                                 
                                 .macro do_lcd_data_r
                                 mov r16, @0
                                 rcall lcd_data
                                 rcall lcd_wait
                                 .endmacro
                                 
                                 
000200                           item1: .byte 1
000201                           item1Cost: .byte 1
000202                           item2: .byte 1
000203                           item2Cost: .byte 1
000204                           item3: .byte 1
000205                           item3Cost: .byte 1
000206                           item4: .byte 1
000207                           item4Cost: .byte 1
000208                           item5: .byte 1
000209                           item5Cost: .byte 1
00020a                           item6: .byte 1
00020b                           item6Cost: .byte 1
00020c                           item7: .byte 1
00020d                           item7Cost: .byte 1
00020e                           item8: .byte 1
00020f                           item8Cost: .byte 1
000210                           item9: .byte 1
000211                           item9Cost: .byte 1
                                 
                                 
                                 
                                 .cseg
                                 
                                 
                                 
                                 .def temp1 = r16
                                 .def timerCounter = r17
                                 .def rmask = r18 ; mask for current row during scan
                                 .def cmask = r19 ; mask for current column during scan
                                 .def row = r20 ; current row number
                                 .def col = r21 ; current column number
                                 .def temp2 = r22
                                 .def temp3 = r23
                                 .def temp4 = r24
                                 .def flag1 = r25
                                 
                                 
                                 .equ TopLED = 0b00000010
                                 .equ SecondLED = 0b00000001
                                 .equ PORTADIR = 0xF0 ; PD7-4: output, PD3-0, input
                                 .equ INITCOLMASK = 0xEF ; scan from the rightmost column,
                                 .equ INITROWMASK = 0x01 ; scan from the top row
                                 .equ ROWMASK = 0x0F ; for obtaining input from Port D
                                 
                                 
                                 
                                 .org 0x0000
000000 940c 005d                    jmp Main;          
                                 
                                  .org INT0addr     //for push button
000002 940c 0033                 jmp EXT_INT0
                                 
                                  .org INT1addr     //for push button
000004 940c 0048                 jmp EXT_INT1
                                 
                                 .org OVF1addr
000028 940c 01d9                 jmp Timer1
                                 
                                 
                                 .org OVF0addr
00002e 940c 01d0                 jmp Timer0
                                 
                                 
000030 940c 0032                 jmp DEFAULT        
000032 9518                      DEFAULT:  reti 
                                 
                                 EXT_INT0:
                                 	
000033 930f                      	push temp1
000034 b70f                      	in temp1, SREG
000035 930f                      	push temp1
                                 
000036 30b1                      	cpi r27, 1
000037 f461                      	brne End
                                 	
000038 2f08                      	mov temp1, temp4
000039 5d00                      	subi temp1,-'0'
                                 	
00003a d486                      	rcall returnInventory
                                 
00003b 8100                      	ld temp1, Z
00003c 300a                      	cpi temp1, 10
00003d f031                      	breq End
                                 
00003e 9503                      	inc temp1
00003f 8300                      	st Z, temp1
                                 
000040 d55f                      	rcall sleep_250ms
                                 	
000041 2f08                      	mov temp1, temp4
000042 5d00                      	subi temp1, -'0'
000043 d4c6                      	rcall adminMode
                                 
                                 
                                 	End:
000044 910f                      	pop temp1
000045 bf0f                      	out SREG, temp1
000046 910f                      	pop temp1
                                 
000047 9518                      	reti
                                 
                                 EXT_INT1:
                                 	
000048 930f                      	push temp1
000049 b70f                      	in temp1, SREG
00004a 930f                      	push temp1
                                 
                                 	
00004b 30b1                      	cpi r27, 1
00004c f461                      	brne End2
                                 
00004d 2f08                      	mov temp1, temp4
00004e 5d00                      	subi temp1,-'0'
                                 
00004f d471                      	rcall returnInventory
                                 
000050 8100                      	ld temp1, Z
000051 3000                      	cpi temp1,0
000052 f031                      	breq End2
                                 
000053 950a                      	dec temp1
000054 8300                      	st Z, temp1
                                 
000055 d54a                      	rcall sleep_250ms
000056 2f08                      	mov temp1, temp4
000057 5d00                      	subi temp1, -'0'
000058 d4b1                      	rcall adminMode
                                 	
                                 	End2:
000059 910f                      	pop temp1
00005a bf0f                      	out SREG, temp1
00005b 910f                      	pop temp1
00005c 9518                      	reti
                                 
                                 Main:
                                 
00005d 2711                      	clr r17
00005e 2722                      	clr r18
00005f 2733                      	clr r19
000060 2744                      	clr r20
000061 2755                      	clr r21
000062 2766                      	clr r22
000063 2799                      	clr flag1
000064 27aa                      	clr r26 //flag2
000065 27bb                      	clr r27 //admin flag
                                 	
000066 9360 0107                 	sts DDRK, r22
                                 
000068 e0d2                      	ldi YH,high(item1)
000069 e0c0                      	ldi YL,low(item1)
00006a e001                      	ldi temp1, 1
00006b 8308                      	st y, temp1
                                 
00006c e0d2                      	ldi YH,high(item1Cost)
00006d e0c1                      	ldi YL,low(item1Cost)
00006e e001                      	ldi temp1,1
00006f 8308                      	st y, temp1
                                 
000070 e0d2                      	ldi YH,high(item2)
000071 e0c2                      	ldi YL,low(item2)
000072 e002                      	ldi temp1, 2
000073 8308                      	st y, temp1
                                 
000074 e0d2                      	ldi YH,high(item2Cost)
000075 e0c3                      	ldi YL,low(item2Cost)
000076 e002                      	ldi temp1,2
000077 8308                      	st y, temp1
                                 
000078 e0d2                      	ldi YH,high(item3)
000079 e0c4                      	ldi YL,low(item3)
00007a e003                      	ldi temp1, 3
00007b 8308                      	st y, temp1
                                 
00007c e0d2                      	ldi YH,high(item3Cost)
00007d e0c5                      	ldi YL,low(item3Cost)
00007e e001                      	ldi temp1,1
00007f 8308                      	st y, temp1
                                 
000080 e0d2                      	ldi YH,high(item4)
000081 e0c6                      	ldi YL,low(item4)
000082 e004                      	ldi temp1, 4
000083 8308                      	st y, temp1
                                 
000084 e0d2                      	ldi YH,high(item4Cost)
000085 e0c7                      	ldi YL,low(item4Cost)
000086 e002                      	ldi temp1,2
000087 8308                      	st y, temp1
                                 
000088 e0d2                      	ldi YH,high(item5)
000089 e0c8                      	ldi YL,low(item5)
00008a e005                      	ldi temp1, 5
00008b 8308                      	st y, temp1
                                 
00008c e0d2                      	ldi YH,high(item5Cost)
00008d e0c9                      	ldi YL,low(item5Cost)
00008e e001                      	ldi temp1,1
00008f 8308                      	st y, temp1
                                 
000090 e0d2                      	ldi YH,high(item6)
000091 e0ca                      	ldi YL,low(item6)
000092 e006                      	ldi temp1, 6
000093 8308                      	st y, temp1
                                 
000094 e0d2                      	ldi YH,high(item6Cost)
000095 e0cb                      	ldi YL,low(item6Cost)
000096 e002                      	ldi temp1,2
000097 8308                      	st y, temp1
                                 
000098 e0d2                      	ldi YH,high(item7)
000099 e0cc                      	ldi YL,low(item7)
00009a e007                      	ldi temp1, 7
00009b 8308                      	st y, temp1
                                 
00009c e0d2                      	ldi YH,high(item7Cost)
00009d e0cd                      	ldi YL,low(item7Cost)
00009e e001                      	ldi temp1,1
00009f 8308                      	st y, temp1
                                 
0000a0 e0d2                      	ldi YH,high(item8)
0000a1 e0ce                      	ldi YL,low(item8)
0000a2 e008                      	ldi temp1, 8
0000a3 8308                      	st y, temp1
                                 
0000a4 e0d2                      	ldi YH,high(item8Cost)
0000a5 e0cf                      	ldi YL,low(item8Cost)
0000a6 e002                      	ldi temp1,2
0000a7 8308                      	st y, temp1
                                 
0000a8 e0d2                      	ldi YH,high(item9)
0000a9 e1c0                      	ldi YL,low(item9)
0000aa e009                      	ldi temp1, 9
0000ab 8308                      	st y, temp1
                                 
0000ac e0d2                      	ldi YH,high(item9Cost)
0000ad e1c1                      	ldi YL,low(item9Cost)
0000ae e001                      	ldi temp1,1
0000af 8308                      	st y, temp1
                                 
                                 
0000b0 2700                      	clr temp1					; connected to PE4 (externally labelled PE2)
0000b1 9300 0099                 	sts OCR3AH, temp1
0000b3 9300 0098                 	sts OCR3AL, temp1
                                 
0000b5 e001                      	ldi temp1, (1 << CS30) 		; set the Timer3 to Phase Correct PWM mode. 
0000b6 9300 0091                 	sts TCCR3B, temp1
0000b8 ea03                      	ldi temp1, (1 << WGM31)|(1<< WGM30)|(1<<COM3B1)|(1<<COM3A1)
0000b9 9300 0090                 	sts TCCR3A, temp1
                                 
0000bb ef0f                      	ser r16
0000bc b907                      	out DDRC, r16
0000bd b90d                      	out DDRE, temp1
0000be bb03                      	out DDRG, temp1
                                 
                                 
0000bf ef0f                      	ldi r16, low(RAMEND)
0000c0 bf0d                      	out SPL, r16
0000c1 e201                      	ldi r16, high(RAMEND)
0000c2 bf0e                      	out SPH, r16
                                 
0000c3 ef0f                      	ser r16 ; LCD setup
0000c4 bb00                      	out DDRF, r16
0000c5 b901                      	out DDRA, r16
0000c6 2700                      	clr r16
0000c7 bb01                      	out PORTF, r16
0000c8 b902                      	out PORTA, r16
                                 
0000c9 e308
0000ca d49a
0000cb d4a9                      	do_lcd_command 0b00111000 ; 2x5x7
0000cc d4c2                      	rcall sleep_5ms
0000cd e308
0000ce d496
0000cf d4a5                      	do_lcd_command 0b00111000 ; 2x5x7
0000d0 d4b5                      	rcall sleep_1ms
0000d1 e308
0000d2 d492
0000d3 d4a1                      	do_lcd_command 0b00111000 ; 2x5x7
0000d4 e308
0000d5 d48f
0000d6 d49e                      	do_lcd_command 0b00111000 ; 2x5x7
0000d7 e008
0000d8 d48c
0000d9 d49b                      	do_lcd_command 0b00001000 ; display off?
0000da e001
0000db d489
0000dc d498                      	do_lcd_command 0b00000001 ; clear display
0000dd e006
0000de d486
0000df d495                      	do_lcd_command 0b00000110 ; increment, no display shift
0000e0 e00e
0000e1 d483
0000e2 d492                      	do_lcd_command 0b00001110 ; Cursor on, bar, no blink
0000e3 e800
0000e4 d480
0000e5 d48f                      	do_lcd_command 0b10000000
                                 
0000e6 e020                      	ldi r18, 0b00000000 ;Timer setup for start screen 3 second wait
0000e7 bd24                      	out TCCR0A, r18
0000e8 e025                      	ldi r18, 0b00000101   
0000e9 bd25                      	out TCCR0B, r18
0000ea e021                      	ldi r18, 1<<TOIE0
0000eb 9320 006e                 	sts TIMSK0, r18
                                 
0000ed e020                      	ldi r18, 0b00000000 ;Timer setup for start screen 3 second wait
0000ee 9320 0080                 	sts TCCR1A, r18
0000f0 e023                      	ldi r18, 0b00000011   
0000f1 9320 0081                 	sts TCCR1B, r18
                                 	;ldi r18, 1<<TOIE1
0000f3 2722                      	clr r18
0000f4 9320 006f                 	sts TIMSK1, r18
                                 
0000f6 ef00                      	ldi temp1, PORTADIR ;keypad setup
0000f7 9300 010a                 	sts DDRL, temp1 ; PA7:4/PA3:0, out/in
                                 
0000f9 9478                      	sei
                                 
0000fa e302
0000fb d470
0000fc d478                      	do_lcd_data '2'
0000fd e301
0000fe d46d
0000ff d475                      	do_lcd_data '1'
000100 e302
000101 d46a
000102 d472                      	do_lcd_data '2'
000103 e301
000104 d467
000105 d46f                      	do_lcd_data '1'
000106 e200
000107 d464
000108 d46c                      	do_lcd_data ' '
000109 e301
00010a d461
00010b d469                      	do_lcd_data '1'
00010c e307
00010d d45e
00010e d466                      	do_lcd_data '7'
00010f e703
000110 d45b
000111 d463                      	do_lcd_data 's'
000112 e301
000113 d458
000114 d460                      	do_lcd_data '1'
000115 e200
000116 d455
000117 d45d                      	do_lcd_data ' '
000118 e200
000119 d452
00011a d45a                      	do_lcd_data ' '
00011b e200
00011c d44f
00011d d457                      	do_lcd_data ' '
00011e e405
00011f d44c
000120 d454                      	do_lcd_data 'E'
000121 e304
000122 d449
000123 d451                      	do_lcd_data '4'
                                 
000124 ea08
000125 d43f
000126 d44e                      	do_lcd_command 0b10101000
                                 
000127 e506
000128 d443
000129 d44b                      	do_lcd_data 'V'
00012a e605
00012b d440
00012c d448                      	do_lcd_data 'e'
00012d e60e
00012e d43d
00012f d445                      	do_lcd_data 'n'
000130 e604
000131 d43a
000132 d442                      	do_lcd_data 'd'
000133 e609
000134 d437
000135 d43f                      	do_lcd_data 'i'
000136 e60e
000137 d434
000138 d43c                      	do_lcd_data 'n'
000139 e607
00013a d431
00013b d439                      	do_lcd_data 'g'
00013c e200
00013d d42e
00013e d436                      	do_lcd_data ' '
00013f e40d
000140 d42b
000141 d433                      	do_lcd_data 'M'
000142 e601
000143 d428
000144 d430                      	do_lcd_data 'a'
000145 e603
000146 d425
000147 d42d                      	do_lcd_data 'c'
000148 e608
000149 d422
00014a d42a                      	do_lcd_data 'h'
00014b e609
00014c d41f
00014d d427                      	do_lcd_data 'i'
00014e e60e
00014f d41c
000150 d424                      	do_lcd_data 'n'
000151 e605
000152 d419
000153 d421                      	do_lcd_data 'e'
                                 
000154 c001                      	rjmp KeypadLoop
                                 
                                 halt:
000155 cfff                      	rjmp halt
                                 
                                 KeypadLoop:
                                 
000156 ee3f                      	ldi cmask, INITCOLMASK ; initial column mask
000157 2755                      	clr col ; initial column
                                 
                                 
                                 colloop:
                                 
000158 3054                      	cpi col, 4
000159 f3e1                      	breq KeypadLoop ; If all keys are scanned, repeat.
00015a 9330 010b                 	sts PORTL, cmask ; Otherwise, scan a column.
00015c ef0f                      	ldi temp1, 0xFF ; Slow down the scan operation.
00015d 950a                      	delay: dec temp1
00015e f7f1                      	brne delay  //assuming this counts down to 0 from 255, otherwise, idk.
00015f 9100 0109                 	lds temp1, PINL ; Read PORTA
000161 700f                      	andi temp1, ROWMASK ; Get the keypad output value
000162 300f                      	cpi temp1, 0xF ; Check if any row is low??? 0b1101
000163 f059                      	breq nextcol ; If yes, find which row is low
000164 e021                      	ldi rmask, INITROWMASK ; Initialize for row check
000165 2744                      	clr row ;
                                 
                                 
                                 rowloop:
                                 
000166 3044                      	cpi row, 4
000167 f039                      	breq nextcol ; the row scan is over.
000168 2f60                      	mov temp2, temp1
000169 2362                      	and temp2, rmask ; check un-masked bit
00016a f099                      	breq convert ; if bit is clear, the key is pressed
00016b 9543                      	inc row ; else move to the next row
00016c 0f22                      	lsl rmask
00016d 940c 0166                 	jmp rowloop
                                 	nextcol: ; if row scan is over
00016f 0f33                      	lsl cmask
000170 9533                      	inc cmask
000171 9553                      	inc col ; increase column value
000172 940c 0158                 	jmp colloop ; go to the next column
                                 
                                 SetZero:
                                 
000174 2f08                      	mov temp1, temp4
000175 5d00                      	subi temp1,-'0'
                                 	
000176 d34a                      	rcall returnInventory
                                 
000177 2700                      	clr temp1
000178 8300                      	st Z, temp1
                                 
000179 2f08                      	mov temp1, temp4
00017a 5d00                      	subi temp1, -'0'
00017b d41e                      	rcall sleep_100ms
00017c d38d                      	rcall adminMode
00017d cfd8                      	rjmp KeypadLoop
                                 
                                 convert:
                                 
00017e 3053                      	cpi col, 3 ; If the pressed key is in col.3
00017f f059                      	breq letters ; we have a letter
                                 	; If the key is not in col.3 and
000180 3043                      	cpi row, 3 ; If the key is in row3,
000181 f171                      	breq symbols ; we have a symbol or 0
000182 2f04                      	mov temp1, row ; Otherwise we have a number in 1-9
000183 0f00                      	lsl temp1
000184 0f04                      	add temp1, row
000185 0f05                      	add temp1, col ; temp1 = row*3 + col
000186 5c0f                      	subi temp1, -'1' ; Add the value of character ‘1’    //key pressed is saved as ascii
000187 30b1                      	cpi r27,1
000188 f1d9                      	breq Adminjmp
000189 940c 023d                 	jmp checkEmpty
                                 
                                 
                                 
                                 letters:
                                 	
00018b e302                      	ldi temp1, 0b00110010
00018c 0f04                      	add temp1, row
                                 
00018d 30b1                      	cpi r27, 1
00018e f5c1                      	brne convert_end
                                 	
00018f 3040                      	cpi row,0
000190 f029                      	breq IncreaseCost
000191 3041                      	cpi row,1
000192 f081                      	breq DecreaseCost
000193 3042                      	cpi row,2
000194 f2f9                      	breq SetZero
                                 
000195 cfc0                      	rjmp KeypadLoop
                                 
                                 IncreaseCost:
                                 	
000196 2f08                      	mov temp1, temp4
000197 5d00                      	subi temp1,-'0'
                                 	
000198 d328                      	rcall returnInventory
                                 
000199 8108                      	ld temp1, Y
00019a 3003                      	cpi temp1, 3
00019b f159                      	breq convert_end
                                 
00019c 9503                      	inc temp1
00019d 8308                      	st Y, temp1
                                 
00019e 2f08                      	mov temp1, temp4
00019f 5d00                      	subi temp1, -'0'
0001a0 d3f9                      	rcall sleep_100ms
                                 	
0001a1 d368                      	rcall adminMode
0001a2 cfb3                      	rjmp KeypadLoop
                                 
                                 DecreaseCost:
                                 	
0001a3 2f08                      	mov temp1, temp4
0001a4 5d00                      	subi temp1,-'0'
                                 	
0001a5 d31b                      	rcall returnInventory
                                 
0001a6 8108                      	ld temp1, Y
0001a7 3001                      	cpi temp1, 1
0001a8 f0f1                      	breq convert_end
                                 
0001a9 950a                      	dec temp1
0001aa 8308                      	st Y, temp1
                                 
0001ab 2f08                      	mov temp1, temp4
0001ac 5d00                      	subi temp1, -'0'
0001ad d3ec                      	rcall sleep_100ms
0001ae d35b                      	rcall adminMode
0001af cfa6                      	rjmp KeypadLoop
                                 
                                 symbols:
                                 
0001b0 3050                      	cpi col, 0 ; Check if we have a star
0001b1 f041                      	breq star
0001b2 3051                      	cpi col, 1 ; or if we have zero
0001b3 f091                      	breq zero
0001b4 e203                      	ldi temp1, '#'
0001b5 30b1                      	cpi r27,1
0001b6 f481                      	brne convert_end
0001b7 2799                      	clr flag1
0001b8 27bb                      	clr r27
0001b9 c124                      	rjmp DisplaySelectScreen2
                                 	
                                 
                                 star:
                                 
                                 	;ldi temp1,'*'
                                 	
0001ba 3091                      	cpi flag1,1
0001bb f021                      	breq Flag2Check
                                 	
0001bc e091                      	ldi flag1, 1
                                 	
0001bd e071                      	ldi temp3, 1<<TOIE1 ;start timer.
0001be 9370 006f                 	sts TIMSK1, temp3
                                 
                                 	Flag2Check:
0001c0 30a1                      	cpi r26,1
0001c1 f039                      	breq adminModeInitialJump ;this mode should clear r26 and flag1
                                 	
                                 	;out PORTC, temp1 ; Write value to PORTC
0001c2 940c 0156                 	jmp KeypadLoop
                                 
                                 Adminjmp:
0001c4 d345                      	rcall adminMode
0001c5 cf90                      	rjmp KeypadLoop
                                 
                                 zero:
                                 
0001c6 e300                      	ldi temp1, '0' ; Set to zero
                                 
                                 convert_end:
                                 
                                 	;out PORTC, temp1 ; Write value to PORTC
0001c7 940c 0156                 	jmp KeypadLoop ; Restart KeypadLoop loop
                                 
                                 .equ LCD_RS = 7
                                 .equ LCD_E = 6
                                 .equ LCD_RW = 5
                                 .equ LCD_BE = 4
                                 
                                 .macro lcd_set
                                 sbi PORTA, @0
                                 .endmacro
                                 .macro lcd_clr
                                 cbi PORTA, @0
                                 .endmacro
                                 
                                 adminModeInitialJump:
                                 	
0001c9 2777                      	clr temp3
0001ca 9370 006f                 	sts TIMSK1, temp3
0001cc 2799                      	clr flag1
0001cd 27aa                      	clr r26
0001ce 940c 0463                 	jmp adminModeInitial
                                 
                                 Timer0: ;Timer overflow 0
                                 
0001d0 e091                      	ldi flag1,1
                                 
0001d1 b70f                      	in temp1, SREG
0001d2 930f                      	push temp1
                                 
0001d3 9513                      	inc timerCounter
                                 
0001d4 3c10                      	cpi timerCounter,192
0001d5 f1c1                      	breq displaySelectScreen
                                 
0001d6 910f                      	pop temp1
0001d7 bf0f                      	out SREG, temp1
                                 
0001d8 9518                      	reti
                                 
                                 Timer1:
                                 
0001d9 933f                      	push cmask
0001da 932f                      	push rmask
0001db 930f                      	push temp1
0001dc 936f                      	push temp2
0001dd b70f                      	in temp1,SREG
0001de 930f                      	push temp1
                                 
                                 	
                                 
0001df 9513                      	inc timerCounter
                                 
                                 
0001e0 ee3f                      	ldi cmask, INITCOLMASK ; initial column mask
                                 
0001e1 9330 010b                 	sts PORTL, cmask ; Otherwise, scan a column.
                                 	
0001e3 ef0f                      	ldi temp1, 0xFF ; Slow down the scan operation.
0001e4 950a                      	Hashdelay: dec temp1
0001e5 f7f1                      	brne Hashdelay  //assuming this counts down to 0 from 255, otherwise, idk.
                                 	
0001e6 9100 0109                 	lds temp1, PINL ; Read PORTA
0001e8 700f                      	andi temp1, ROWMASK ; Get the keypad output value
0001e9 300f                      	cpi temp1, 0xF ; Check if any row is low???
0001ea f0b9                      	breq Released ; If yes, find which row is low
                                 	
0001eb e021                      	ldi rmask, INITROWMASK ; Initialize for row check
                                 
0001ec 0f22                      	lsl rmask
0001ed 0f22                      	lsl rmask
0001ee 0f22                      	lsl rmask
                                 
0001ef 2f60                      	mov temp2, temp1
0001f0 2362                      	and temp2, rmask
0001f1 f009                      	breq StillPressed 
                                 
0001f2 c00f                      	rjmp Released
                                 	
                                 StillPressed:
                                 
0001f3 9513                      	inc timerCounter
                                 
                                 	
                                 	;out PORTC, TimerCounter
                                 	
0001f4 3119                      	cpi timerCounter, 25
0001f5 f028                      	brlo Finish
                                 		
                                 	;ldi temp1, 0b11110000
                                 	;out PORTC, temp1
                                 
0001f6 e0a1                      	ldi r26,1
0001f7 2777                      	clr temp3
0001f8 9370 006f                 	sts TIMSK1, temp3
                                 
0001fa 2711                      	clr timerCounter
                                 
                                 	Finish:
                                 
0001fb 910f                      	pop temp1
0001fc bf0f                      	out SREG, temp1
0001fd 916f                      	pop temp2
0001fe 910f                      	pop temp1
0001ff 912f                      	pop rmask
000200 913f                      	pop cmask
                                 
000201 9518                      	reti
                                 
                                 Released:
                                 	
000202 2777                      	clr temp3
000203 9370 006f                 	sts TIMSK1, temp3
000205 2799                      	clr flag1
                                 
000206 2711                      	clr timerCounter
                                 
                                 	;ldi temp1, 0b11111111
                                 	;out PORTC, temp1
                                 
000207 910f                      	pop temp1
000208 bf0f                      	out SREG, temp1
000209 916f                      	pop temp2
00020a 910f                      	pop temp1
00020b 912f                      	pop rmask
00020c 913f                      	pop cmask
                                 	
00020d 9518                      	reti
                                 
                                 displaySelectScreen:
                                 
00020e 2711                      	clr timerCounter
00020f 2799                      	clr flag1
                                 
000210 2722                      	clr r18 
000211 9320 006e                 	sts TIMSK0, r18 ; turn off timer.
                                 
000213 e001
000214 d350
000215 d35f                      	do_lcd_command 0b00000001 ; clear display
000216 e800
000217 d34d
000218 d35c                      	do_lcd_command 0b10000000 ;set cursor to addr 0 on LCD
                                 
000219 e503
00021a d351
00021b d359                      	do_lcd_data 'S'
00021c e605
00021d d34e
00021e d356                      	do_lcd_data 'e'
00021f e60c
000220 d34b
000221 d353                      	do_lcd_data 'l'
000222 e605
000223 d348
000224 d350                      	do_lcd_data 'e'
000225 e603
000226 d345
000227 d34d                      	do_lcd_data 'c'
000228 e704
000229 d342
00022a d34a                      	do_lcd_data 't'
00022b e200
00022c d33f
00022d d347                      	do_lcd_data ' '
00022e e609
00022f d33c
000230 d344                      	do_lcd_data 'i'
000231 e704
000232 d339
000233 d341                      	do_lcd_data 't'
000234 e605
000235 d336
000236 d33e                      	do_lcd_data 'e'
000237 e60d
000238 d333
000239 d33b                      	do_lcd_data 'm'
                                 
00023a 910f                      	pop temp1
00023b bf0f                      	out SREG, temp1
                                 
00023c 9518                      	reti
                                 
                                 
                                 checkEmpty:
                                 //temp1 is ascii
00023d 930f                      	push temp1
00023e 5300                      	subi temp1, '0'
00023f 3001                      	cpi temp1, 1
000240 f081                      	breq check1
000241 3002                      	cpi temp1, 2
000242 f0a9                      	breq check2
000243 3003                      	cpi temp1, 3
000244 f0d1                      	breq check3
000245 3004                      	cpi temp1, 4
000246 f0f9                      	breq check4
000247 3005                      	cpi temp1, 5
000248 f121                      	breq check5
000249 3006                      	cpi temp1, 6
00024a f149                      	breq check6
00024b 3007                      	cpi temp1, 7
00024c f171                      	breq check7
00024d 3008                      	cpi temp1, 8
00024e f199                      	breq check8
00024f 3009                      	cpi temp1, 9
000250 f1c1                      	breq check9
                                 
                                 	check1:
000251 e0e0                      		ldi ZL, low(item1)
000252 e0f2                      		ldi ZH, high(item1)
000253 8160                      		ld temp2, Z
000254 910f                      		pop temp1
000255 3060                      		cpi temp2, 0
000256 f1c9                      		breq EmptyScreen
000257 c0b2                      		rjmp CoinScreen
                                 	check2:
000258 e0e2                      		ldi ZL, low(item2)
000259 e0f2                      		ldi ZH, high(item2)
00025a 8160                      		ld temp2, Z
00025b 910f                      		pop temp1
00025c 3060                      		cpi temp2, 0
00025d f191                      		breq EmptyScreen
00025e c0ab                      		rjmp CoinScreen
                                 	check3:
00025f e0e4                      		ldi ZL, low(item3)
000260 e0f2                      		ldi ZH, high(item3)
000261 8160                      		ld temp2, Z
000262 910f                      		pop temp1
000263 3060                      		cpi temp2, 0
000264 f159                      		breq EmptyScreen
000265 c0a4                      		rjmp CoinScreen
                                 	check4:
000266 e0e6                      		ldi ZL, low(item4)
000267 e0f2                      		ldi ZH, high(item4)
000268 8160                      		ld temp2, Z
000269 910f                      		pop temp1
00026a 3060                      		cpi temp2, 0
00026b f121                      		breq EmptyScreen
00026c c09d                      		rjmp CoinScreen
                                 	check5:
00026d e0e8                      		ldi ZL, low(item5)
00026e e0f2                      		ldi ZH, high(item5)
00026f 8160                      		ld temp2, Z
000270 910f                      		pop temp1
000271 3060                      		cpi temp2, 0
000272 f0e9                      		breq EmptyScreen
000273 c096                      		rjmp CoinScreen
                                 	check6:
000274 e0ea                      		ldi ZL, low(item6)
000275 e0f2                      		ldi ZH, high(item6)
000276 8160                      		ld temp2, Z
000277 910f                      		pop temp1
000278 3060                      		cpi temp2, 0
000279 f0b1                      		breq EmptyScreen
00027a c08f                      		rjmp CoinScreen
                                 	check7:
00027b e0ec                      		ldi ZL, low(item7)
00027c e0f2                      		ldi ZH, high(item7)
00027d 8160                      		ld temp2, Z
00027e 910f                      		pop temp1
00027f 3060                      		cpi temp2, 0
000280 f079                      		breq EmptyScreen
000281 c088                      		rjmp CoinScreen
                                 	check8:
000282 e0ee                      		ldi ZL, low(item8)
000283 e0f2                      		ldi ZH, high(item8)
000284 8160                      		ld temp2, Z
000285 910f                      		pop temp1
000286 3060                      		cpi temp2, 0
000287 f041                      		breq EmptyScreen
000288 c081                      		rjmp CoinScreen
                                 	check9:
000289 e1e0                      		ldi ZL, low(item9)
00028a e0f2                      		ldi ZH, high(item9)
00028b 8160                      		ld temp2, Z
00028c 910f                      		pop temp1
00028d 3060                      		cpi temp2, 0
00028e f009                      		breq EmptyScreen
00028f c07a                      		rjmp CoinScreen
                                 
                                 	
                                 EmptyScreen:
                                 		
000290 930f                      		push temp1
                                 
000291 e001
000292 d2d2
000293 d2e1                      		do_lcd_command 0b00000001
000294 e40f
000295 d2d6
000296 d2de                      		do_lcd_data 'O'
000297 e705
000298 d2d3
000299 d2db                      		do_lcd_data 'u'
00029a e704
00029b d2d0
00029c d2d8                      		do_lcd_data 't'
00029d e200
00029e d2cd
00029f d2d5                      		do_lcd_data ' '
0002a0 e60f
0002a1 d2ca
0002a2 d2d2                      		do_lcd_data 'o'
0002a3 e606
0002a4 d2c7
0002a5 d2cf                      		do_lcd_data 'f'
0002a6 e200
0002a7 d2c4
0002a8 d2cc                      		do_lcd_data ' '
0002a9 e703
0002aa d2c1
0002ab d2c9                      		do_lcd_data 's'
0002ac e704
0002ad d2be
0002ae d2c6                      		do_lcd_data 't'
0002af e60f
0002b0 d2bb
0002b1 d2c3                      		do_lcd_data 'o'
0002b2 e603
0002b3 d2b8
0002b4 d2c0                      		do_lcd_data 'c'
0002b5 e60b
0002b6 d2b5
0002b7 d2bd                      		do_lcd_data 'k'
                                 
0002b8 ea08
0002b9 d2ab
0002ba d2ba                      		do_lcd_command 0b10101000
0002bb 910f                      		pop temp1
0002bc 2f00
0002bd d2ae
0002be d2b6                      		do_lcd_data_r temp1
                                 
0002bf ef0f                      		ser temp1
0002c0 b908                      		out PORTC, temp1
0002c1 e002                      		ldi temp1, TopLED
0002c2 6001                      		ori temp1, SecondLED
0002c3 bb04                      		out PORTG, temp1
                                 		
0002c4 d2e2                      		rcall sleep_500ms
0002c5 2700                      		clr temp1
0002c6 b908                      		out PORTC, temp1
0002c7 bb04                      		out PORTG, temp1
                                 		
0002c8 d2de                      		rcall sleep_500ms
0002c9 ef0f                      		ser temp1
0002ca b908                      		out PORTC, temp1
0002cb e002                      		ldi temp1, TopLED
0002cc 6001                      		ori temp1, SecondLED
0002cd bb04                      		out PORTG, temp1
                                 		
0002ce d2d8                      		rcall sleep_500ms
0002cf 2700                      		clr temp1
0002d0 b908                      		out PORTC, temp1
0002d1 bb04                      		out PORTG, temp1
                                 
0002d2 d2d4                      		rcall sleep_500ms
0002d3 ef0f                      		ser temp1
0002d4 b908                      		out PORTC, temp1
0002d5 e002                      		ldi temp1, TopLED
0002d6 6001                      		ori temp1, SecondLED
0002d7 bb04                      		out PORTG, temp1
                                 
0002d8 d2ce                      		rcall sleep_500ms
0002d9 2700                      		clr temp1
0002da b908                      		out PORTC, temp1
0002db bb04                      		out PORTG, temp1
                                 		
0002dc d2ca                      		rcall sleep_500ms
                                 		
                                 		
0002dd c000                      		rjmp displaySelectScreen2
                                 
                                 
                                 displaySelectScreen2:
                                 
0002de 2700                      	clr temp1
0002df b908                      	out PORTC, temp1
0002e0 bb04                      	out PORTG, temp1
                                 
0002e1 e001
0002e2 d282
0002e3 d291                      	do_lcd_command 0b00000001 ; clear display
0002e4 e800
0002e5 d27f
0002e6 d28e                      	do_lcd_command 0b10000000 ;set cursor to addr 0 on LCD
                                 
0002e7 e503
0002e8 d283
0002e9 d28b                      	do_lcd_data 'S'
0002ea e605
0002eb d280
0002ec d288                      	do_lcd_data 'e'
0002ed e60c
0002ee d27d
0002ef d285                      	do_lcd_data 'l'
0002f0 e605
0002f1 d27a
0002f2 d282                      	do_lcd_data 'e'
0002f3 e603
0002f4 d277
0002f5 d27f                      	do_lcd_data 'c'
0002f6 e704
0002f7 d274
0002f8 d27c                      	do_lcd_data 't'
0002f9 e200
0002fa d271
0002fb d279                      	do_lcd_data ' '
0002fc e609
0002fd d26e
0002fe d276                      	do_lcd_data 'i'
0002ff e704
000300 d26b
000301 d273                      	do_lcd_data 't'
000302 e605
000303 d268
000304 d270                      	do_lcd_data 'e'
000305 e60d
000306 d265
000307 d26d                      	do_lcd_data 'm'
                                 
000308 d29e                      	rcall sleep_500ms
                                 
000309 ce4c                      	rjmp KeypadLoop
                                 
                                 
                                 CoinScreen:
                                 	
00030a 930f                      	push temp1
00030b 2722                      	clr r18 
00030c 9320 006e                 	sts TIMSK0, r18 ; turn off timer.
                                 
00030e e001
00030f d255
000310 d264                      	do_lcd_command 0b00000001 ; clear display
000311 e800
000312 d252
000313 d261                      	do_lcd_command 0b10000000 ;set cursor to addr 0 on LCD
                                 
000314 e409
000315 d256
000316 d25e                      	do_lcd_data 'I'
000317 e60e
000318 d253
000319 d25b                      	do_lcd_data 'n'
00031a e703
00031b d250
00031c d258                      	do_lcd_data 's'
00031d e605
00031e d24d
00031f d255                      	do_lcd_data 'e'
000320 e702
000321 d24a
000322 d252                      	do_lcd_data 'r'
000323 e704
000324 d247
000325 d24f                      	do_lcd_data 't'
000326 e200
000327 d244
000328 d24c                      	do_lcd_data ' '
000329 e603
00032a d241
00032b d249                      	do_lcd_data 'c'
00032c e60f
00032d d23e
00032e d246                      	do_lcd_data 'o'
00032f e609
000330 d23b
000331 d243                      	do_lcd_data 'i'
000332 e60e
000333 d238
000334 d240                      	do_lcd_data 'n'
000335 e703
000336 d235
000337 d23d                      	do_lcd_data 's'
000338 e200
000339 d232
00033a d23a                      	do_lcd_data ' '
00033b e203
00033c d22f
00033d d237                      	do_lcd_data '#'
                                 	;subi temp1, -'1'
00033e 910f                      	pop temp1
00033f 2f60                      	mov temp2,temp1
000340 930f                      	push temp1
000341 2f06
000342 d229
000343 d231                      	do_lcd_data_r temp2
                                 	
000344 ea08
000345 d21f
000346 d22e                      	do_lcd_command 0b10101000
000347 c000                      	rjmp InsertCoin
                                 
                                 	
                                 
                                 	.macro HashLoop
                                 
                                 	ldi cmask, INITCOLMASK ; initial column mask
                                 	lsl cmask
                                 	lsl cmask  //third column
                                 
                                 	sts PORTL, cmask ; Otherwise, scan a column.
                                 	
                                 	ldi temp1, 0xFF ; Slow down the scan operation.
                                 	Hashdelay: dec temp1
                                 	brne Hashdelay  //assuming this counts down to 0 from 255, otherwise, idk.
                                 	
                                 	lds temp1, PINL ; Read PORTA
                                 	andi temp1, ROWMASK ; Get the keypad output value
                                 	cpi temp1, 0xF ; Check if any row is low???
                                 	breq @0 ; If yes, find which row is low
                                 	
                                 	ldi rmask, INITROWMASK ; Initialize for row check
                                 
                                 	lsl rmask
                                 	lsl rmask
                                 	lsl rmask
                                 
                                 	mov temp2, temp1
                                 	and temp2, rmask 
                                 	breq CoinReturn
                                 	
                                 	rjmp @0
                                 	.endmacro
                                 
                                 InsertCoin:
                                 	
000348 910f                      	pop temp1
                                 
000349 d177                      	rcall ReturnInventory
00034a 8168                      	ld temp2,Y
                                 
00034b 930f                      	push temp1
                                 
00034c 2788                      	clr temp4
00034d 2777                      	clr temp3
00034e b978                      	out PORTC, temp3
00034f ea08
000350 d214
000351 d223                      	do_lcd_command 0b10101000
                                 	
000352 2f06                      	mov temp1,temp2
000353 5d00                      	subi temp1,-'0'
000354 2f00
000355 d216
000356 d21e                      	do_lcd_data_r temp1
                                 
                                 	FirstZeroLoop:
000357 930f                      		push temp1
000358 936f                      		push temp2
                                 
000359 ee3f
00035a 0f33
00035b 0f33
00035c 9330 010b
00035e ef0f
00035f 950a
000360 f7f1
000361 9100 0109
000363 700f
000364 300f
000365 f041
000366 e021
000367 0f22
000368 0f22
000369 0f22
00036a 2f60
00036b 2362
00036c f141
00036d c000                      		HashLoop Loop2c
                                 		Loop2c:
                                 
00036e 916f                      		pop temp2 
00036f 910f                      		pop temp1 
                                 
000370 9100 0106                 		lds temp1, PINK
000372 7001                      		andi temp1, 0b00000001
                                 		
                                 
000373 3000                      		cpi temp1, 0
000374 f711                      		brne FirstZeroLoop
000375 c000                      		rjmp SecondOneLoop
                                 
                                 	SecondOneLoop:
                                 
000376 9100 0106                 		lds temp1, PINK
                                 		
000378 930f                      		push temp1
000379 936f                      		push temp2
                                 
00037a ee3f
00037b 0f33
00037c 0f33
00037d 9330 010b
00037f ef0f
000380 950a
000381 f7f1
000382 9100 0109
000384 700f
000385 300f
000386 f041
000387 e021
000388 0f22
000389 0f22
00038a 0f22
00038b 2f60
00038c 2362
00038d f039
00038e c000                      		HashLoop Loopc
                                 		Loopc:
                                 		
00038f 916f                      		pop temp2 
000390 910f                      		pop temp1 
                                 
000391 7001                      		andi temp1, 0b00000001
000392 3001                      		cpi temp1, 1
000393 f711                      		brne SecondOneLoop
000394 c011                      		rjmp ThirdZeroLoop 
                                 
                                 	CoinReturn:
                                 
000395 3080                      		cpi temp4,0
000396 f071                      		breq JumpDisplay
000397 958a                      		dec temp4
                                 	
000398 ef0f                      		ser temp1					
000399 9300 0099                 		sts OCR3AH, temp1
00039b 9300 0098                 		sts OCR3AL, temp1
                                 	
00039d d202                      		rcall sleep_250ms
                                 
00039e 2700                      		clr temp1					
00039f 9300 0099                 		sts OCR3AH, temp1
0003a1 9300 0098                 		sts OCR3AL, temp1
                                 	
0003a3 d1fc                      		rcall sleep_250ms
0003a4 cff0                      		rjmp CoinReturn
                                 
                                 		JumpDisplay:
0003a5 cf38                      		rjmp displaySelectScreen2
                                 		
                                 	ThirdZeroLoop:
                                 
0003a6 930f                      		push temp1
0003a7 936f                      		push temp2
                                 			
0003a8 ee3f
0003a9 0f33
0003aa 0f33
0003ab 9330 010b
0003ad ef0f
0003ae 950a
0003af f7f1
0003b0 9100 0109
0003b2 700f
0003b3 300f
0003b4 f041
0003b5 e021
0003b6 0f22
0003b7 0f22
0003b8 0f22
0003b9 2f60
0003ba 2362
0003bb f2c9
0003bc c000                      		HashLoop Loop3c
                                 		Loop3c:
                                 			
0003bd 916f                      		pop temp2
0003be 910f                      		pop temp1 
                                 
0003bf 9100 0106                 		lds temp1, PINK
0003c1 7001                      		andi temp1, 0b00000001
                                 		
                                 
0003c2 3000                      		cpi temp1, 0
0003c3 f711                      		brne ThirdZeroLoop
                                 		
0003c4 9583                      		inc temp4
                                 		
0003c5 956a                      		dec temp2
                                 		
0003c6 2f06                      		mov temp1,temp2
0003c7 5d00                      		subi temp1,-'0'
0003c8 0f77                      		lsl temp3
0003c9 6071                      		ori temp3, 0b00000001
                                 
0003ca 930f                      		push temp1
                                 
0003cb b978                      		out PORTC, temp3
0003cc ea08
0003cd d197
0003ce d1a6                      		do_lcd_command 0b10101000
                                 		
0003cf 910f                      		pop temp1
0003d0 2f00
0003d1 d19a
0003d2 d1a2                      		do_lcd_data_r temp1
0003d3 3060                      		cpi temp2, 0
0003d4 f009                      		breq DeliverScreen
0003d5 cf81                      		rjmp FirstZeroLoop
                                 		 
                                 
                                 
                                 DeliverScreen:
                                 	;cli  //disable all input related interrupts
                                 	
0003d6 ef0f                      	ser temp1
0003d7 b90d                      	out DDRE, temp1
0003d8 b907                      	out DDRC, temp1
                                 	
                                 	;ldi temp1,0b10101010
                                 	;out PORTC, temp1
0003d9 e001
0003da d18a
0003db d199                      	do_lcd_command 0b00000001
0003dc e404
0003dd d18e
0003de d196                      	do_lcd_data 'D'
0003df e605
0003e0 d18b
0003e1 d193                      	do_lcd_data 'e'
0003e2 e60c
0003e3 d188
0003e4 d190                      	do_lcd_data 'l'
0003e5 e609
0003e6 d185
0003e7 d18d                      	do_lcd_data 'i'
0003e8 e706
0003e9 d182
0003ea d18a                      	do_lcd_data 'v'
0003eb e605
0003ec d17f
0003ed d187                      	do_lcd_data 'e'
0003ee e702
0003ef d17c
0003f0 d184                      	do_lcd_data 'r'
0003f1 e609
0003f2 d179
0003f3 d181                      	do_lcd_data 'i'
0003f4 e60e
0003f5 d176
0003f6 d17e                      	do_lcd_data 'n'
0003f7 e607
0003f8 d173
0003f9 d17b                      	do_lcd_data 'g'
0003fa e200
0003fb d170
0003fc d178                      	do_lcd_data ' '
0003fd e409
0003fe d16d
0003ff d175                      	do_lcd_data 'I'
000400 e704
000401 d16a
000402 d172                      	do_lcd_data 't'
000403 e605
000404 d167
000405 d16f                      	do_lcd_data 'e'
000406 e60d
000407 d164
000408 d16c                      	do_lcd_data 'm'
                                 
000409 916f                      	pop temp2
00040a 5360                      	subi temp2, '0'
                                 
00040b d00e                      	rcall decrementInventory
                                 
00040c ef0f                      	ser temp1					; connected to PE4 (externally labelled PE2)
00040d 9300 0099                 	sts OCR3AH, temp1
00040f 9300 0098                 	sts OCR3AL, temp1
                                 
000411 d19b                      	rcall sleep_1000ms
000412 d19a                      	rcall sleep_1000ms
000413 d199                      	rcall sleep_1000ms
                                 
000414 2700                      	clr temp1					; connected to PE4 (externally labelled PE2)
000415 9300 0099                 	sts OCR3AH, temp1
000417 9300 0098                 	sts OCR3AL, temp1
                                 
000419 cec4                      	rjmp displaySelectScreen2
                                 
                                 
                                 	
                                 decrementInventory:
                                 	
00041a 3061                      	cpi temp2, 1
00041b f089                      	breq decrement1
00041c 3062                      	cpi temp2, 2
00041d f0a9                      	breq decrement2
00041e 3063                      	cpi temp2, 3
00041f f0c9                      	breq decrement3
000420 3064                      	cpi temp2, 4
000421 f0e9                      	breq decrement4
000422 3065                      	cpi temp2, 5
000423 f109                      	breq decrement5
000424 3066                      	cpi temp2, 6
000425 f129                      	breq decrement6
000426 3067                      	cpi temp2, 7
000427 f149                      	breq decrement7
000428 3068                      	cpi temp2, 8
000429 f169                      	breq decrement8
00042a 3069                      	cpi temp2, 9
00042b f189                      	breq decrement9
00042c 9508                      	ret
                                 	
                                 	decrement1:
                                 		
00042d e0e0                      		ldi ZL, low(item1)
00042e e0f2                      		ldi ZH, high(item1)
00042f 8100                      		ld temp1, Z
                                 		
                                 		
000430 950a                      		dec temp1
                                 		//out PORTC, temp1
000431 8300                      		st Z, temp1
                                 
000432 9508                      		ret
                                 	decrement2:
                                 		
000433 e0e2                      		ldi ZL, low(item2)
000434 e0f2                      		ldi ZH, high(item2)
000435 8100                      		ld temp1, Z
                                 		
                                 		//out PORTC, temp1
                                 		
000436 950a                      		dec temp1
000437 8300                      		st Z, temp1
000438 9508                      		ret
                                 	
                                 	decrement3:
                                 		
000439 e0e4                      		ldi ZL, low(item3)
00043a e0f2                      		ldi ZH, high(item3)
                                 		
00043b 8100                      		ld temp1, Z
                                 		//out PORTC, temp1
00043c 950a                      		dec temp1
                                 
00043d 8300                      		st Z, temp1
00043e 9508                      		ret
                                 	
                                 	decrement4:
00043f e0e6                      		ldi ZL, low(item4)
000440 e0f2                      		ldi ZH, high(item4)
000441 8100                      		ld temp1, Z
                                 		
000442 950a                      		dec temp1
                                 		//out PORTC, temp1
000443 8300                      		st Z, temp1
000444 9508                      		ret
                                 
                                 	decrement5:
000445 e0e8                      		ldi ZL, low(item5)
000446 e0f2                      		ldi ZH, high(item5)
000447 8100                      		ld temp1, Z
                                 		
000448 950a                      		dec temp1
                                 		//out PORTC, temp1
000449 8300                      		st Z, temp1
00044a 9508                      		ret
                                 	
                                 	decrement6:
                                 		
00044b e0ea                      		ldi ZL, low(item6)
00044c e0f2                      		ldi ZH, high(item6)
00044d 8100                      		ld temp1, Z
                                 		
                                 		//out PORTC, temp1
00044e 950a                      		dec temp1
00044f 8300                      		st Z, temp1
000450 9508                      		ret
                                 	
                                 	decrement7:
                                 		
000451 e0ec                      		ldi ZL, low(item7)
000452 e0f2                      		ldi ZH, high(item7)
000453 8100                      		ld temp1, Z
                                 		//out PORTC, temp1
                                 
000454 950a                      		dec temp1
000455 8300                      		st Z, temp1
000456 9508                      		ret
                                 	
                                 	decrement8:
000457 e0ee                      		ldi ZL, low(item8)
000458 e0f2                      		ldi ZH, high(item8)
000459 8100                      		ld temp1, Z
                                 		//out PORTC, temp1
                                 
00045a 950a                      		dec temp1
00045b 8300                      		st Z, temp1
00045c 9508                      		ret
                                 	
                                 	decrement9:
00045d e1e0                      		ldi ZL, low(item9)
00045e e0f2                      		ldi ZH, high(item9)
00045f 8100                      		ld temp1, Z
                                 		//out PORTC, temp1
                                 
000460 950a                      		dec temp1
000461 8300                      		st Z, temp1
000462 9508                      		ret
                                 
                                 .macro LEDcount
                                 	push @0
                                 	push temp2
                                 	push temp3
                                 	clr temp2
                                 	out PORTG, temp2
                                 
                                 	cpi @0, 10
                                 	breq TWO
                                 	cpi @0, 9 
                                 	breq ONE
                                 	rjmp mainloop
                                 
                                 	TWO:
                                 		
                                 		ldi temp3, TopLED
                                 		ori temp3, SecondLED
                                 		out PORTG, temp3
                                 		rjmp mainloop
                                 
                                 	ONE:
                                 		ldi temp3, SecondLED
                                 		out PORTG, temp3
                                 
                                 	mainloop:
                                 	cpi @0, 0
                                 	breq endmacro
                                 
                                 	lsl temp2
                                 	ori temp2, 0b00000001
                                 	
                                 	dec @0
                                 
                                 	rjmp mainloop
                                 	endmacro:
                                 
                                 	out PORTC, temp2
                                 
                                 
                                 
                                 
                                 	pop temp3
                                 	pop temp2
                                 	pop @0
                                 .endmacro
                                 
                                 adminModeInitial:
                                 
000463 e001
000464 d100
000465 d10f                      	do_lcd_command 0b00000001
000466 e401
000467 d104
000468 d10c                      	do_lcd_data 'A'
000469 e604
00046a d101
00046b d109                      	do_lcd_data 'd'
00046c e60d
00046d d0fe
00046e d106                      	do_lcd_data 'm'
00046f e609
000470 d0fb
000471 d103                      	do_lcd_data 'i'
000472 e60e
000473 d0f8
000474 d100                      	do_lcd_data 'n'
000475 e200
000476 d0f5
000477 d0fd                      	do_lcd_data ' '
000478 e60d
000479 d0f2
00047a d0fa                      	do_lcd_data 'm'
00047b e60f
00047c d0ef
00047d d0f7                      	do_lcd_data 'o'
00047e e604
00047f d0ec
000480 d0f4                      	do_lcd_data 'd'
000481 e605
000482 d0e9
000483 d0f1                      	do_lcd_data 'e'
000484 e200
000485 d0e6
000486 d0ee                      	do_lcd_data ' '
000487 e301
000488 d0e3
000489 d0eb                      	do_lcd_data '1'
                                 	
00048a ea08
00048b d0d9
00048c d0e8                      	do_lcd_command 0b10101000
                                 
00048d 930f                      	push temp1
00048e e0e0                      	ldi ZL, low(item1)   //z holds pointer to item1's inventory. 
00048f e0f2                      	ldi ZH, high(item1)
000490 8100                      	ld temp1, Z
                                 	
000491 930f
000492 936f
000493 937f
000494 2766
000495 bb64
000496 300a
000497 f019
000498 3009
000499 f029
00049a c006
00049b e072
00049c 6071
00049d bb74
00049e c002
00049f e071
0004a0 bb74
0004a1 3000
0004a2 f021
0004a3 0f66
0004a4 6061
0004a5 950a
0004a6 cffa
0004a7 b968
0004a8 917f
0004a9 916f
0004aa 910f                      	LEDcount temp1
                                 
0004ab 5d00                      	subi temp1, -'0'
0004ac 2f00
0004ad d0be
0004ae d0c6                      	do_lcd_data_r temp1 
                                 	//out PORTC, temp1    //since item 1 will initially have only 1 item, no conversion is needed
                                 	
0004af eb06
0004b0 d0b4
0004b1 d0c3                      	do_lcd_command 0b10110110
0004b2 e204
0004b3 d0b8
0004b4 d0c0                      	do_lcd_data '$'
0004b5 e0e1                      	ldi ZL, low(item1Cost)
0004b6 e0f2                      	ldi ZH, high(item1Cost)
0004b7 8100                      	ld temp1, Z
0004b8 5d00                      	subi temp1, -'0'
0004b9 2f00
0004ba d0b1
0004bb d0b9                      	do_lcd_data_r temp1 
0004bc 910f                      	pop temp1
                                 
                                 
0004bd e081                      	ldi temp4, 1
0004be e0b1                      	ldi r27,1
0004bf e091                      	ldi flag1,1
                                 
0004c0 cc95                      	rjmp KeypadLoop
                                 
                                 
                                 
                                 returnInventory:
                                 	 
0004c1 930f                      	push temp1
0004c2 5300                      	subi temp1, '0'
0004c3 3001                      	cpi temp1, 1
0004c4 f079                      	breq return1
0004c5 3002                      	cpi temp1, 2
0004c6 f099                      	breq return2
0004c7 3003                      	cpi temp1, 3
0004c8 f0b9                      	breq return3
0004c9 3004                      	cpi temp1, 4
0004ca f0d9                      	breq return4
0004cb 3005                      	cpi temp1, 5
0004cc f0f9                      	breq return5
0004cd 3006                      	cpi temp1, 6
0004ce f119                      	breq return6
0004cf 3007                      	cpi temp1, 7
0004d0 f139                      	breq return7
0004d1 3008                      	cpi temp1, 8
0004d2 f159                      	breq return8
0004d3 c030                      	rjmp return9
                                 
                                 	return1:
0004d4 e0e0                      		ldi ZL, low(item1)    //inventory amount
0004d5 e0f2                      		ldi ZH, high(item1)
0004d6 e0c1                      		ldi YL, low(item1Cost) 	//item cost
0004d7 e0d2                      		ldi YH, high(item1Cost)	
                                 		;ldi temp1, 0b00000001
                                 		;out PORTC, temp1
0004d8 910f                      		pop temp1
0004d9 9508                      		ret
                                 	return2:
0004da e0e2                      		ldi ZL, low(item2)   
0004db e0f2                      		ldi ZH, high(item2)
0004dc e0c3                      		ldi YL, low(item2Cost) 	//item cost
0004dd e0d2                      		ldi YH, high(item2Cost)
                                 		;ldi temp1, 0b00000011
                                 		;out PORTC, temp1
0004de 910f                      		pop temp1
0004df 9508                      		ret
                                 	return3:
0004e0 e0e4                      		ldi ZL, low(item3)   
0004e1 e0f2                      		ldi ZH, high(item3)
0004e2 e0c5                      		ldi YL, low(item3Cost) 	//item cost
0004e3 e0d2                      		ldi YH, high(item3Cost)
                                 		;ldi temp1, 0b00000111
                                 		;out PORTC, temp1
0004e4 910f                      		pop temp1
0004e5 9508                      		ret
                                 	return4:
0004e6 e0e6                      		ldi ZL, low(item4)   
0004e7 e0f2                      		ldi ZH, high(item4)
0004e8 e0c7                      		ldi YL, low(item4Cost) 	//item cost
0004e9 e0d2                      		ldi YH, high(item4Cost)
                                 		;ldi temp1, 0b00001111
                                 		;out PORTC, temp1
0004ea 910f                      		pop temp1
0004eb 9508                      		ret
                                 	return5:
0004ec e0e8                      		ldi ZL, low(item5)   
0004ed e0f2                      		ldi ZH, high(item5)
0004ee e0c9                      		ldi YL, low(item5Cost) 	//item cost
0004ef e0d2                      		ldi YH, high(item5Cost)
                                 		;ldi temp1, 0b00011111
                                 		;out PORTC, temp1
0004f0 910f                      		pop temp1
0004f1 9508                      		ret
                                 	return6:
0004f2 e0ea                      		ldi ZL, low(item6)   
0004f3 e0f2                      		ldi ZH, high(item6)
0004f4 e0cb                      		ldi YL, low(item6Cost) 	//item cost
0004f5 e0d2                      		ldi YH, high(item6Cost)
                                 		;ldi temp1, 0b00111111
                                 		;out PORTC, temp1
0004f6 910f                      		pop temp1
0004f7 9508                      		ret
                                 	return7:
0004f8 e0ec                      		ldi ZL, low(item7)   
0004f9 e0f2                      		ldi ZH, high(item7)
0004fa e0cd                      		ldi YL, low(item7Cost) 	//item cost
0004fb e0d2                      		ldi YH, high(item7Cost)
                                 		;ldi temp1, 0b01111111
                                 		;out PORTC, temp1
0004fc 910f                      		pop temp1
0004fd 9508                      		ret
                                 	return8:
0004fe e0ee                      		ldi ZL, low(item8)   
0004ff e0f2                      		ldi ZH, high(item8)
000500 e0cf                      		ldi YL, low(item8Cost) 	//item cost
000501 e0d2                      		ldi YH, high(item8Cost)
                                 		;ldi temp1, 0b11111111
                                 		;out PORTC, temp1
000502 910f                      		pop temp1
000503 9508                      		ret
                                 	return9:
000504 e1e0                      		ldi ZL, low(item9)   
000505 e0f2                      		ldi ZH, high(item9)
000506 e1c1                      		ldi YL, low(item9Cost) 	//item cost
000507 e0d2                      		ldi YH, high(item9Cost)
000508 910f                      		pop temp1
000509 9508                      		ret
                                 
                                 	
                                 
                                 adminMode:
                                 	//how does the program get here?
                                 
00050a d08f                      	rcall sleep_100ms
                                 	
                                 
00050b 930f                      	push temp1
00050c dfb4                      	rcall returnInventory  //itll get stuck in a loop here.
                                 
00050d e001
00050e d056
00050f d065                      	do_lcd_command 0b00000001
000510 e401
000511 d05a
000512 d062                      	do_lcd_data 'A'
000513 e604
000514 d057
000515 d05f                      	do_lcd_data 'd'
000516 e60d
000517 d054
000518 d05c                      	do_lcd_data 'm'
000519 e609
00051a d051
00051b d059                      	do_lcd_data 'i'
00051c e60e
00051d d04e
00051e d056                      	do_lcd_data 'n'
00051f e200
000520 d04b
000521 d053                      	do_lcd_data ' '
000522 e60d
000523 d048
000524 d050                      	do_lcd_data 'm'
000525 e60f
000526 d045
000527 d04d                      	do_lcd_data 'o'
000528 e604
000529 d042
00052a d04a                      	do_lcd_data 'd'
00052b e605
00052c d03f
00052d d047                      	do_lcd_data 'e'
00052e e200
00052f d03c
000530 d044                      	do_lcd_data ' '
000531 910f                      	pop temp1
                                 	
000532 2f80                      	mov temp4, temp1
000533 5380                      	subi temp4, '0'
                                 
000534 2f00
000535 d036
000536 d03e                      	do_lcd_data_r temp1 
                                 
000537 ea08
000538 d02c
000539 d03b                      	do_lcd_command 0b10101000
                                 
00053a 8100                      	ld temp1, Z
                                 
00053b 930f
00053c 936f
00053d 937f
00053e 2766
00053f bb64
000540 300a
000541 f019
000542 3009
000543 f029
000544 c006
000545 e072
000546 6071
000547 bb74
000548 c002
000549 e071
00054a bb74
00054b 3000
00054c f021
00054d 0f66
00054e 6061
00054f 950a
000550 cffa
000551 b968
000552 917f
000553 916f
000554 910f                      	LEDcount temp1
                                 
000555 5d00                      	subi temp1,-'0'
                                 
000556 2f00
000557 d014
000558 d01c                      	do_lcd_data_r temp1   //displays inventory of selected item
                                 	
000559 eb06
00055a d00a
00055b d019                      	do_lcd_command 0b10110110
00055c e204
00055d d00e
00055e d016                      	do_lcd_data '$'		//displays cost of selected item
00055f 8108                      	ld temp1, Y
000560 5d00                      	subi temp1,-'0'
000561 2f00
000562 d009
000563 d011                      	do_lcd_data_r temp1 
                                 
                                 
000564 9508                      	ret   
                                 	
                                 	
                                 
                                 lcd_command: ; Send a command to the LCD (r16)
                                 
000565 bb01                      	out PORTF, r16
000566 d01f                      	rcall sleep_1ms
000567 9a16                      	lcd_set LCD_E
000568 d01d                      	rcall sleep_1ms
000569 9816                      	lcd_clr LCD_E
00056a d01b                      	rcall sleep_1ms
00056b 9508                      	ret
                                 
                                 lcd_data:
                                 
00056c bb01                      	out PORTF, r16
00056d 9a17                      	lcd_set LCD_RS
00056e d017                      	rcall sleep_1ms
00056f 9a16                      	lcd_set LCD_E
000570 d015                      	rcall sleep_1ms
000571 9816                      	lcd_clr LCD_E
000572 d013                      	rcall sleep_1ms
000573 9817                      	lcd_clr LCD_RS
000574 9508                      	ret
                                 
                                 lcd_wait:
                                 
000575 930f                      	push r16
000576 2700                      	clr r16
000577 bb00                      	out DDRF, r16
000578 bb01                      	out PORTF, r16
000579 9a15                      	lcd_set LCD_RW
                                 	lcd_wait_loop:
00057a d00b                      	rcall sleep_1ms
00057b 9a16                      	lcd_set LCD_E
00057c d009                      	rcall sleep_1ms
00057d b10f                      	in r16, PINF
00057e 9816                      	lcd_clr LCD_E
00057f fd07                      	sbrc r16, 7
000580 cff9                      	rjmp lcd_wait_loop
000581 9815                      	lcd_clr LCD_RW
000582 ef0f                      	ser r16
000583 bb00                      	out DDRF, r16
000584 910f                      	pop r16
000585 9508                      	ret
                                 
                                 .equ F_CPU = 16000000
                                 .equ DELAY_1MS = F_CPU / 4 / 1000 - 4
                                 ; 4 cycles per iteration - setup/call-return overhead
                                 
                                 sleep_1ms:
                                 	
000586 938f                      	push r24
000587 939f                      	push r25
000588 e09f                      	ldi r25, high(DELAY_1MS)
000589 e98c                      	ldi r24, low(DELAY_1MS)
                                 
                                 delayloop_1ms:
                                 	
00058a 9701                      	sbiw r25:r24, 1
00058b f7f1                      	brne delayloop_1ms
00058c 919f                      	pop r25
00058d 918f                      	pop r24
00058e 9508                      	ret
                                 
                                 sleep_5ms:
                                 
00058f dff6                      	rcall sleep_1ms
000590 dff5                      	rcall sleep_1ms
000591 dff4                      	rcall sleep_1ms
000592 dff3                      	rcall sleep_1ms
000593 dff2                      	rcall sleep_1ms
000594 9508                      	ret
                                 
                                 sleep_20ms:
                                 
000595 dff9                      	rcall sleep_5ms
000596 dff8                      	rcall sleep_5ms
000597 dff7                      	rcall sleep_5ms
000598 dff6                      	rcall sleep_5ms
000599 9508                      	ret
                                 
                                 sleep_100ms:
                                 	
00059a dffa                      	rcall sleep_20ms
00059b dff9                      	rcall sleep_20ms
00059c dff8                      	rcall sleep_20ms
00059d dff7                      	rcall sleep_20ms
00059e dff6                      	rcall sleep_20ms
00059f 9508                      	ret
                                 
                                 sleep_250ms:
0005a0 dff9                      	rcall sleep_100ms
0005a1 dff8                      	rcall sleep_100ms
0005a2 dff2                      	rcall sleep_20ms
0005a3 dff1                      	rcall sleep_20ms
0005a4 dfea                      	rcall sleep_5ms
0005a5 dfe9                      	rcall sleep_5ms
0005a6 9508                      	ret
                                 sleep_500ms:
                                 	
0005a7 dff2                      	rcall sleep_100ms
0005a8 dff1                      	rcall sleep_100ms
0005a9 dff0                      	rcall sleep_100ms
0005aa dfef                      	rcall sleep_100ms
0005ab dfee                      	rcall sleep_100ms
0005ac 9508                      	ret
                                 
                                 sleep_1000ms:
                                 
0005ad dff9                      	rcall sleep_500ms
0005ae dff8                      	rcall sleep_500ms
0005af 9508                      	ret


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega2560" register use summary:
x  :   0 y  :  24 z  :  35 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 498 r17:   9 r18:  43 r19:  22 r20:  11 
r21:   8 r22:  71 r23:  27 r24:  21 r25:  13 r26:   4 r27:   8 r28:  27 
r29:  27 r30:  29 r31:  29 
Registers used: 18 out of 35 (51.4%)

"ATmega2560" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   3 adiw  :   0 and   :   5 
andi  :   8 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  70 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 brlt  :   0 brmi  :   0 
brne  :  13 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   5 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  40 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :  73 cpse  :   0 dec   :  20 eicall:   0 eijmp :   0 elpm  :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   5 inc   :   9 jmp   :  12 ld    :  27 ldd   :   0 ldi   : 319 
lds   :   8 lpm   :   0 lsl   :  24 lsr   :   0 mov   :  29 movw  :   0 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   8 out   :  48 pop   :  56 push  :  34 rcall : 377 ret   :  30 
reti  :   7 rjmp  :  39 rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :   1 sbr   :   0 sbrc  :   1 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   9 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  32 std   :   0 sts   :  29 sub   :   0 subi  :  21 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 34 out of 116 (29.3%)

"ATmega2560" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000b60   2836      0   2836  262144   1.1%
[.dseg] 0x000200 0x000212      0     18     18    8192   0.2%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
