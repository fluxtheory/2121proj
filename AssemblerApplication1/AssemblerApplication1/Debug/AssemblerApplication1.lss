
AVRASM ver. 2.2.6  C:\Users\Brandon\Desktop\UNI STUFF\comp 2121\2121proj\AssemblerApplication1\AssemblerApplication1\main.asm Thu Jun 01 16:08:16 2017

[builtin](2): Including file 'C:\Program Files (x86)\Atmel\AVR Tools\AvrAssembler2\Appnotes\m2560def.inc'
C:\Users\Brandon\Desktop\UNI STUFF\comp 2121\2121proj\AssemblerApplication1\AssemblerApplication1\main.asm(1): Including file 'C:\Program Files (x86)\Atmel\AVR Tools\AvrAssembler2\Appnotes\m2560def.inc'
[builtin](2): Including file 'C:\Program Files (x86)\Atmel\AVR Tools\AvrAssembler2\Appnotes\m2560def.inc'
C:\Users\Brandon\Desktop\UNI STUFF\comp 2121\2121proj\AssemblerApplication1\AssemblerApplication1\main.asm(1): Including file 'C:\Program Files (x86)\Atmel\AVR Tools\AvrAssembler2\Appnotes\m2560def.inc'
                                 
                                 .include "m2560def.inc"
                                 
                                 ;***** Created: 2011-08-25 20:59 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-08-25
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #define _M2560DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega2560
                                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x98
                                 .equ	SIGNATURE_002	= 0x01
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                                 .equ	PINL	= 0x109	; MEMORY MAPPED
                                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                                 .equ	PINK	= 0x106	; MEMORY MAPPED
                                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                                 .equ	PINH	= 0x100	; MEMORY MAPPED
                                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR5	= 0x1a
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTG	= 0x14
                                 .equ	DDRG	= 0x13
                                 .equ	PING	= 0x12
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 .equ	PORTG5	= 5	; 
                                 .equ	PG5	= 5	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 .equ	DDG5	= 5	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 .equ	PING5	= 5	; 
                                 
                                 
                                 ; ***** PORTH ************************
                                 ; PORTH - PORT H Data Register
                                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                                 .equ	PH0	= 0	; For compatibility
                                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                                 .equ	PH1	= 1	; For compatibility
                                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                                 .equ	PH2	= 2	; For compatibility
                                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                                 .equ	PH3	= 3	; For compatibility
                                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                                 .equ	PH4	= 4	; For compatibility
                                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                                 .equ	PH5	= 5	; For compatibility
                                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                                 .equ	PH6	= 6	; For compatibility
                                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                                 .equ	PH7	= 7	; For compatibility
                                 
                                 ; DDRH - PORT H Data Direction Register
                                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                                 
                                 ; PINH - PORT H Input Pins
                                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                                 
                                 
                                 ; ***** PORTJ ************************
                                 ; PORTJ - PORT J Data Register
                                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                                 .equ	PJ0	= 0	; For compatibility
                                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                                 .equ	PJ1	= 1	; For compatibility
                                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                                 .equ	PJ2	= 2	; For compatibility
                                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                                 .equ	PJ3	= 3	; For compatibility
                                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                                 .equ	PJ4	= 4	; For compatibility
                                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                                 .equ	PJ5	= 5	; For compatibility
                                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                                 .equ	PJ6	= 6	; For compatibility
                                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                                 .equ	PJ7	= 7	; For compatibility
                                 
                                 ; DDRJ - PORT J Data Direction Register
                                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                                 
                                 ; PINJ - PORT J Input Pins
                                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                                 
                                 
                                 ; ***** PORTK ************************
                                 ; PORTK - PORT K Data Register
                                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                                 .equ	PK0	= 0	; For compatibility
                                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                                 .equ	PK1	= 1	; For compatibility
                                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                                 .equ	PK2	= 2	; For compatibility
                                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                                 .equ	PK3	= 3	; For compatibility
                                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                                 .equ	PK4	= 4	; For compatibility
                                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                                 .equ	PK5	= 5	; For compatibility
                                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                                 .equ	PK6	= 6	; For compatibility
                                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                                 .equ	PK7	= 7	; For compatibility
                                 
                                 ; DDRK - PORT K Data Direction Register
                                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                                 
                                 ; PINK - PORT K Input Pins
                                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                                 
                                 
                                 ; ***** PORTL ************************
                                 ; PORTL - PORT L Data Register
                                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                                 .equ	PL0	= 0	; For compatibility
                                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                                 .equ	PL1	= 1	; For compatibility
                                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                                 .equ	PL2	= 2	; For compatibility
                                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                                 .equ	PL3	= 3	; For compatibility
                                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                                 .equ	PL4	= 4	; For compatibility
                                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                                 .equ	PL5	= 5	; For compatibility
                                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                                 .equ	PL6	= 6	; For compatibility
                                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                                 .equ	PL7	= 7	; For compatibility
                                 
                                 ; DDRL - PORT L Data Direction Register
                                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                                 
                                 ; PINL - PORT L Input Pins
                                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_5 **************
                                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                                 
                                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                                 .equ	ICF5	= 5	; Input Capture Flag 5
                                 
                                 ; TCCR5A - Timer/Counter5 Control Register A
                                 .equ	WGM50	= 0	; Waveform Generation Mode
                                 .equ	WGM51	= 1	; Waveform Generation Mode
                                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR5B - Timer/Counter5 Control Register B
                                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                                 .equ	WGM52	= 3	; Waveform Generation Mode
                                 .equ	WGM53	= 4	; Waveform Generation Mode
                                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                                 
                                 ; TCCR5C - Timer/Counter 5 Control Register C
                                 .equ	FOC5C	= 5	; Force Output Compare 5C
                                 .equ	FOC5B	= 6	; Force Output Compare 5B
                                 .equ	FOC5A	= 7	; Force Output Compare 5A
                                 
                                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                                 
                                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                                 .equ	ICF4	= 5	; Input Capture Flag 4
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0	; Waveform Generation Mode
                                 .equ	WGM41	= 1	; Waveform Generation Mode
                                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                                 .equ	WGM42	= 3	; Waveform Generation Mode
                                 .equ	WGM43	= 4	; Waveform Generation Mode
                                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	FOC4C	= 5	; Force Output Compare 4C
                                 .equ	FOC4B	= 6	; Force Output Compare 4B
                                 .equ	FOC4A	= 7	; Force Output Compare 4A
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW00	= 0	; Wait state select bit lower page
                                 .equ	SRW01	= 1	; Wait state select bit lower page
                                 .equ	SRW10	= 2	; Wait state select bit upper page
                                 .equ	SRW11	= 3	; Wait state select bit upper page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRUSART2	= 1	; Power Reduction USART2
                                 .equ	PRUSART3	= 2	; Power Reduction USART3
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register
                                 .equ	ADC8D	= 0	; 
                                 .equ	ADC9D	= 1	; 
                                 .equ	ADC10D	= 2	; 
                                 .equ	ADC11D	= 3	; 
                                 .equ	ADC12D	= 4	; 
                                 .equ	ADC13D	= 5	; 
                                 .equ	ADC14D	= 6	; 
                                 .equ	ADC15D	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** USART2 ***********************
                                 ; UDR2 - USART I/O Data Register
                                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR2A - USART Control and Status Register A
                                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                                 .equ	U2X2	= 1	; Double the USART transmission speed
                                 .equ	UPE2	= 2	; Parity Error
                                 .equ	DOR2	= 3	; Data overRun
                                 .equ	FE2	= 4	; Framing Error
                                 .equ	UDRE2	= 5	; USART Data Register Empty
                                 .equ	TXC2	= 6	; USART Transmitt Complete
                                 .equ	RXC2	= 7	; USART Receive Complete
                                 
                                 ; UCSR2B - USART Control and Status Register B
                                 .equ	TXB82	= 0	; Transmit Data Bit 8
                                 .equ	RXB82	= 1	; Receive Data Bit 8
                                 .equ	UCSZ22	= 2	; Character Size
                                 .equ	TXEN2	= 3	; Transmitter Enable
                                 .equ	RXEN2	= 4	; Receiver Enable
                                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR2C - USART Control and Status Register C
                                 .equ	UCPOL2	= 0	; Clock Polarity
                                 .equ	UCSZ20	= 1	; Character Size
                                 .equ	UCSZ21	= 2	; Character Size
                                 .equ	USBS2	= 3	; Stop Bit Select
                                 .equ	UPM20	= 4	; Parity Mode Bit 0
                                 .equ	UPM21	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL20	= 6	; USART Mode Select
                                 .equ	UMSEL21	= 7	; USART Mode Select
                                 
                                 ; UBRR2H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR2L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART3 ***********************
                                 ; UDR3 - USART I/O Data Register
                                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR3A - USART Control and Status Register A
                                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                                 .equ	U2X3	= 1	; Double the USART transmission speed
                                 .equ	UPE3	= 2	; Parity Error
                                 .equ	DOR3	= 3	; Data overRun
                                 .equ	FE3	= 4	; Framing Error
                                 .equ	UDRE3	= 5	; USART Data Register Empty
                                 .equ	TXC3	= 6	; USART Transmitt Complete
                                 .equ	RXC3	= 7	; USART Receive Complete
                                 
                                 ; UCSR3B - USART Control and Status Register B
                                 .equ	TXB83	= 0	; Transmit Data Bit 8
                                 .equ	RXB83	= 1	; Receive Data Bit 8
                                 .equ	UCSZ32	= 2	; Character Size
                                 .equ	TXEN3	= 3	; Transmitter Enable
                                 .equ	RXEN3	= 4	; Receiver Enable
                                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR3C - USART Control and Status Register C
                                 .equ	UCPOL3	= 0	; Clock Polarity
                                 .equ	UCSZ30	= 1	; Character Size
                                 .equ	UCSZ31	= 2	; Character Size
                                 .equ	USBS3	= 3	; Stop Bit Select
                                 .equ	UPM30	= 4	; Parity Mode Bit 0
                                 .equ	UPM31	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL30	= 6	; USART Mode Select
                                 .equ	UMSEL31	= 7	; USART Mode Select
                                 
                                 ; UBRR3H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR3L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                                 .equ	IOEND	= 0x01ff
                                 .equ	SRAM_START	= 0x0200
                                 .equ	SRAM_SIZE	= 8192
                                 .equ	RAMEND	= 0x21ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 262144
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1f000
                                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1efff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x1fe00
                                 .equ	SECONDBOOTSTART	= 0x1fc00
                                 .equ	THIRDBOOTSTART	= 0x1f800
                                 .equ	FOURTHBOOTSTART	= 0x1f000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                                 
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 
                                 ;***** Created: 2011-08-25 20:59 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-08-25
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 .dseg
                                 .macro do_lcd_command
                                 ldi r16, @0
                                 rcall lcd_command
                                 rcall lcd_wait
                                 .endmacro
                                 
                                 
                                 .macro do_lcd_data
                                 ldi r16, @0
                                 rcall lcd_data
                                 rcall lcd_wait
                                 .endmacro
                                 
                                 .macro do_lcd_data_r
                                 mov r16, @0
                                 rcall lcd_data
                                 rcall lcd_wait
                                 .endmacro
                                 
                                 
000200                           item1: .byte 1
000201                           item1Cost: .byte 1
000202                           item2: .byte 1
000203                           item2Cost: .byte 1
000204                           item3: .byte 1
000205                           item3Cost: .byte 1
000206                           item4: .byte 1
000207                           item4Cost: .byte 1
000208                           item5: .byte 1
000209                           item5Cost: .byte 1
00020a                           item6: .byte 1
00020b                           item6Cost: .byte 1
00020c                           item7: .byte 1
00020d                           item7Cost: .byte 1
00020e                           item8: .byte 1
00020f                           item8Cost: .byte 1
000210                           item9: .byte 1
000211                           item9Cost: .byte 1
                                 
                                 
                                 
                                 .cseg
                                 
                                 
                                 
                                 .def temp1 = r16
                                 .def timerCounter = r17
                                 .def rmask = r18 ; mask for current row during scan
                                 .def cmask = r19 ; mask for current column during scan
                                 .def row = r20 ; current row number
                                 .def col = r21 ; current column number
                                 .def temp2 = r22
                                 .def temp3 = r23
                                 .def temp4 = r24
                                 .def flag1 = r25
                                 
                                 
                                 
                                 .equ PORTADIR = 0xF0 ; PD7-4: output, PD3-0, input
                                 .equ INITCOLMASK = 0xEF ; scan from the rightmost column,
                                 .equ INITROWMASK = 0x01 ; scan from the top row
                                 .equ ROWMASK = 0x0F ; for obtaining input from Port D
                                 
                                 
                                 
                                 .org 0x0000
000000 940c 0057                    jmp Main;          
                                 
                                  .org INT0addr     //for push button
000002 940c 0033                 jmp EXT_INT0
                                 
                                  .org INT1addr     //for push button
000004 940c 0045                 jmp EXT_INT1
                                 
                                 .org OVF1addr
000028 940c 01cf                 jmp Timer1
                                 
                                 
                                 .org OVF0addr
00002e 940c 01c6                 jmp Timer0
                                 
                                 
000030 940c 0032                 jmp DEFAULT        
000032 9518                      DEFAULT:  reti 
                                 
                                 EXT_INT0:
                                 	
000033 930f                      	push temp1
000034 b70f                      	in temp1, SREG
000035 930f                      	push temp1
                                 
000036 30b1                      	cpi r27, 1
000037 f449                      	brne End
                                 	
000038 2f08                      	mov temp1, temp4
000039 5d00                      	subi temp1,-'0'
                                 	
00003a d459                      	rcall returnInventory
                                 
00003b 8100                      	ld temp1, Z
00003c 300a                      	cpi temp1, 10
00003d f019                      	breq End
                                 
00003e 9503                      	inc temp1
00003f 8300                      	st Z, temp1
                                 
000040 d529                      	rcall sleep_250ms
                                 
                                 	End:
000041 910f                      	pop temp1
000042 bf0f                      	out SREG, temp1
000043 910f                      	pop temp1
                                 
000044 9518                      	reti
                                 
                                 EXT_INT1:
                                 	
000045 930f                      	push temp1
000046 b70f                      	in temp1, SREG
000047 930f                      	push temp1
                                 
                                 	
000048 30b1                      	cpi r27, 1
000049 f449                      	brne End2
                                 
00004a 2f08                      	mov temp1, temp4
00004b 5d00                      	subi temp1,-'0'
                                 
00004c d447                      	rcall returnInventory
                                 
00004d 8100                      	ld temp1, Z
00004e 3000                      	cpi temp1,0
00004f f019                      	breq End2
                                 
000050 950a                      	dec temp1
000051 8300                      	st Z, temp1
                                 
000052 d517                      	rcall sleep_250ms
                                 	
                                 	End2:
000053 910f                      	pop temp1
000054 bf0f                      	out SREG, temp1
000055 910f                      	pop temp1
000056 9518                      	reti
                                 
                                 Main:
                                 
000057 2711                      	clr r17
000058 2722                      	clr r18
000059 2733                      	clr r19
00005a 2744                      	clr r20
00005b 2755                      	clr r21
00005c 2766                      	clr r22
00005d 2799                      	clr flag1
00005e 27aa                      	clr r26 //flag2
00005f 27bb                      	clr r27 //admin flag
                                 	
000060 9360 0107                 	sts DDRK, r22
                                 
000062 e0d2                      	ldi YH,high(item1)
000063 e0c0                      	ldi YL,low(item1)
000064 e001                      	ldi temp1, 1
000065 8308                      	st y, temp1
                                 
000066 e0d2                      	ldi YH,high(item1Cost)
000067 e0c1                      	ldi YL,low(item1Cost)
000068 e001                      	ldi temp1,1
000069 8308                      	st y, temp1
                                 
00006a e0d2                      	ldi YH,high(item2)
00006b e0c2                      	ldi YL,low(item2)
00006c e002                      	ldi temp1, 2
00006d 8308                      	st y, temp1
                                 
00006e e0d2                      	ldi YH,high(item2Cost)
00006f e0c3                      	ldi YL,low(item2Cost)
000070 e002                      	ldi temp1,2
000071 8308                      	st y, temp1
                                 
000072 e0d2                      	ldi YH,high(item3)
000073 e0c4                      	ldi YL,low(item3)
000074 e003                      	ldi temp1, 3
000075 8308                      	st y, temp1
                                 
000076 e0d2                      	ldi YH,high(item3Cost)
000077 e0c5                      	ldi YL,low(item3Cost)
000078 e001                      	ldi temp1,1
000079 8308                      	st y, temp1
                                 
00007a e0d2                      	ldi YH,high(item4)
00007b e0c6                      	ldi YL,low(item4)
00007c e004                      	ldi temp1, 4
00007d 8308                      	st y, temp1
                                 
00007e e0d2                      	ldi YH,high(item4Cost)
00007f e0c7                      	ldi YL,low(item4Cost)
000080 e002                      	ldi temp1,2
000081 8308                      	st y, temp1
                                 
000082 e0d2                      	ldi YH,high(item5)
000083 e0c8                      	ldi YL,low(item5)
000084 e005                      	ldi temp1, 5
000085 8308                      	st y, temp1
                                 
000086 e0d2                      	ldi YH,high(item5Cost)
000087 e0c9                      	ldi YL,low(item5Cost)
000088 e001                      	ldi temp1,1
000089 8308                      	st y, temp1
                                 
00008a e0d2                      	ldi YH,high(item6)
00008b e0ca                      	ldi YL,low(item6)
00008c e006                      	ldi temp1, 6
00008d 8308                      	st y, temp1
                                 
00008e e0d2                      	ldi YH,high(item6Cost)
00008f e0cb                      	ldi YL,low(item6Cost)
000090 e002                      	ldi temp1,2
000091 8308                      	st y, temp1
                                 
000092 e0d2                      	ldi YH,high(item7)
000093 e0cc                      	ldi YL,low(item7)
000094 e007                      	ldi temp1, 7
000095 8308                      	st y, temp1
                                 
000096 e0d2                      	ldi YH,high(item7Cost)
000097 e0cd                      	ldi YL,low(item7Cost)
000098 e001                      	ldi temp1,1
000099 8308                      	st y, temp1
                                 
00009a e0d2                      	ldi YH,high(item8)
00009b e0ce                      	ldi YL,low(item8)
00009c e008                      	ldi temp1, 8
00009d 8308                      	st y, temp1
                                 
00009e e0d2                      	ldi YH,high(item8Cost)
00009f e0cf                      	ldi YL,low(item8Cost)
0000a0 e002                      	ldi temp1,2
0000a1 8308                      	st y, temp1
                                 
0000a2 e0d2                      	ldi YH,high(item9)
0000a3 e1c0                      	ldi YL,low(item9)
0000a4 e009                      	ldi temp1, 9
0000a5 8308                      	st y, temp1
                                 
0000a6 e0d2                      	ldi YH,high(item9Cost)
0000a7 e1c1                      	ldi YL,low(item9Cost)
0000a8 e001                      	ldi temp1,1
0000a9 8308                      	st y, temp1
                                 
                                 
0000aa 2700                      	clr temp1					; connected to PE4 (externally labelled PE2)
0000ab 9300 0099                 	sts OCR3AH, temp1
0000ad 9300 0098                 	sts OCR3AL, temp1
                                 
0000af e001                      	ldi temp1, (1 << CS30) 		; set the Timer3 to Phase Correct PWM mode. 
0000b0 9300 0091                 	sts TCCR3B, temp1
0000b2 ea03                      	ldi temp1, (1 << WGM31)|(1<< WGM30)|(1<<COM3B1)|(1<<COM3A1)
0000b3 9300 0090                 	sts TCCR3A, temp1
                                 
0000b5 ef0f                      	ser r16
0000b6 b907                      	out DDRC, r16
0000b7 b90d                      	out DDRE, temp1
                                 
0000b8 ef0f                      	ldi r16, low(RAMEND)
0000b9 bf0d                      	out SPL, r16
0000ba e201                      	ldi r16, high(RAMEND)
0000bb bf0e                      	out SPH, r16
                                 
0000bc ef0f                      	ser r16 ; LCD setup
0000bd bb00                      	out DDRF, r16
0000be b901                      	out DDRA, r16
0000bf 2700                      	clr r16
0000c0 bb01                      	out PORTF, r16
0000c1 b902                      	out PORTA, r16
                                 
0000c2 e308
0000c3 d46b
0000c4 d47a                      	do_lcd_command 0b00111000 ; 2x5x7
0000c5 d493                      	rcall sleep_5ms
0000c6 e308
0000c7 d467
0000c8 d476                      	do_lcd_command 0b00111000 ; 2x5x7
0000c9 d486                      	rcall sleep_1ms
0000ca e308
0000cb d463
0000cc d472                      	do_lcd_command 0b00111000 ; 2x5x7
0000cd e308
0000ce d460
0000cf d46f                      	do_lcd_command 0b00111000 ; 2x5x7
0000d0 e008
0000d1 d45d
0000d2 d46c                      	do_lcd_command 0b00001000 ; display off?
0000d3 e001
0000d4 d45a
0000d5 d469                      	do_lcd_command 0b00000001 ; clear display
0000d6 e006
0000d7 d457
0000d8 d466                      	do_lcd_command 0b00000110 ; increment, no display shift
0000d9 e00e
0000da d454
0000db d463                      	do_lcd_command 0b00001110 ; Cursor on, bar, no blink
0000dc e800
0000dd d451
0000de d460                      	do_lcd_command 0b10000000
                                 
0000df e020                      	ldi r18, 0b00000000 ;Timer setup for start screen 3 second wait
0000e0 bd24                      	out TCCR0A, r18
0000e1 e025                      	ldi r18, 0b00000101   
0000e2 bd25                      	out TCCR0B, r18
0000e3 e021                      	ldi r18, 1<<TOIE0
0000e4 9320 006e                 	sts TIMSK0, r18
                                 
0000e6 e020                      	ldi r18, 0b00000000 ;Timer setup for start screen 3 second wait
0000e7 9320 0080                 	sts TCCR1A, r18
0000e9 e023                      	ldi r18, 0b00000011   
0000ea 9320 0081                 	sts TCCR1B, r18
                                 	;ldi r18, 1<<TOIE1
0000ec 2722                      	clr r18
0000ed 9320 006f                 	sts TIMSK1, r18
                                 
0000ef ef00                      	ldi temp1, PORTADIR ;keypad setup
0000f0 9300 010a                 	sts DDRL, temp1 ; PA7:4/PA3:0, out/in
                                 
0000f2 9478                      	sei
                                 
0000f3 e302
0000f4 d441
0000f5 d449                      	do_lcd_data '2'
0000f6 e301
0000f7 d43e
0000f8 d446                      	do_lcd_data '1'
0000f9 e302
0000fa d43b
0000fb d443                      	do_lcd_data '2'
0000fc e301
0000fd d438
0000fe d440                      	do_lcd_data '1'
0000ff e200
000100 d435
000101 d43d                      	do_lcd_data ' '
000102 e301
000103 d432
000104 d43a                      	do_lcd_data '1'
000105 e307
000106 d42f
000107 d437                      	do_lcd_data '7'
000108 e703
000109 d42c
00010a d434                      	do_lcd_data 's'
00010b e301
00010c d429
00010d d431                      	do_lcd_data '1'
00010e e200
00010f d426
000110 d42e                      	do_lcd_data ' '
000111 e200
000112 d423
000113 d42b                      	do_lcd_data ' '
000114 e200
000115 d420
000116 d428                      	do_lcd_data ' '
000117 e405
000118 d41d
000119 d425                      	do_lcd_data 'E'
00011a e304
00011b d41a
00011c d422                      	do_lcd_data '4'
                                 
00011d ea08
00011e d410
00011f d41f                      	do_lcd_command 0b10101000
                                 
000120 e506
000121 d414
000122 d41c                      	do_lcd_data 'V'
000123 e605
000124 d411
000125 d419                      	do_lcd_data 'e'
000126 e60e
000127 d40e
000128 d416                      	do_lcd_data 'n'
000129 e604
00012a d40b
00012b d413                      	do_lcd_data 'd'
00012c e609
00012d d408
00012e d410                      	do_lcd_data 'i'
00012f e60e
000130 d405
000131 d40d                      	do_lcd_data 'n'
000132 e607
000133 d402
000134 d40a                      	do_lcd_data 'g'
000135 e200
000136 d3ff
000137 d407                      	do_lcd_data ' '
000138 e40d
000139 d3fc
00013a d404                      	do_lcd_data 'M'
00013b e601
00013c d3f9
00013d d401                      	do_lcd_data 'a'
00013e e603
00013f d3f6
000140 d3fe                      	do_lcd_data 'c'
000141 e608
000142 d3f3
000143 d3fb                      	do_lcd_data 'h'
000144 e609
000145 d3f0
000146 d3f8                      	do_lcd_data 'i'
000147 e60e
000148 d3ed
000149 d3f5                      	do_lcd_data 'n'
00014a e605
00014b d3ea
00014c d3f2                      	do_lcd_data 'e'
                                 
00014d c001                      	rjmp KeypadLoop
                                 
                                 halt:
00014e cfff                      	rjmp halt
                                 
                                 KeypadLoop:
                                 
00014f ee3f                      	ldi cmask, INITCOLMASK ; initial column mask
000150 2755                      	clr col ; initial column
                                 
                                 
                                 colloop:
                                 
000151 3054                      	cpi col, 4
000152 f3e1                      	breq KeypadLoop ; If all keys are scanned, repeat.
000153 9330 010b                 	sts PORTL, cmask ; Otherwise, scan a column.
000155 ef0f                      	ldi temp1, 0xFF ; Slow down the scan operation.
000156 950a                      	delay: dec temp1
000157 f7f1                      	brne delay  //assuming this counts down to 0 from 255, otherwise, idk.
000158 9100 0109                 	lds temp1, PINL ; Read PORTA
00015a 700f                      	andi temp1, ROWMASK ; Get the keypad output value
00015b 300f                      	cpi temp1, 0xF ; Check if any row is low??? 0b1101
00015c f059                      	breq nextcol ; If yes, find which row is low
00015d e021                      	ldi rmask, INITROWMASK ; Initialize for row check
00015e 2744                      	clr row ;
                                 
                                 
                                 rowloop:
                                 
00015f 3044                      	cpi row, 4
000160 f039                      	breq nextcol ; the row scan is over.
000161 2f60                      	mov temp2, temp1
000162 2362                      	and temp2, rmask ; check un-masked bit
000163 f091                      	breq convert ; if bit is clear, the key is pressed
000164 9543                      	inc row ; else move to the next row
000165 0f22                      	lsl rmask
000166 940c 015f                 	jmp rowloop
                                 	nextcol: ; if row scan is over
000168 0f33                      	lsl cmask
000169 9533                      	inc cmask
00016a 9553                      	inc col ; increase column value
00016b 940c 0151                 	jmp colloop ; go to the next column
                                 
                                 SetZero:
                                 
00016d 2f08                      	mov temp1, temp4
00016e 5d00                      	subi temp1,-'0'
                                 	
00016f d324                      	rcall returnInventory
                                 
000170 2700                      	clr temp1
000171 8300                      	st Z, temp1
                                 
000172 2f08                      	mov temp1, temp4
000173 5d00                      	subi temp1, -'0'
000174 d3ef                      	rcall sleep_100ms
000175 c377                      	rjmp adminMode
                                 
                                 convert:
                                 
000176 3053                      	cpi col, 3 ; If the pressed key is in col.3
000177 f059                      	breq letters ; we have a letter
                                 	; If the key is not in col.3 and
000178 3043                      	cpi row, 3 ; If the key is in row3,
000179 f161                      	breq symbols ; we have a symbol or 0
00017a 2f04                      	mov temp1, row ; Otherwise we have a number in 1-9
00017b 0f00                      	lsl temp1
00017c 0f04                      	add temp1, row
00017d 0f05                      	add temp1, col ; temp1 = row*3 + col
00017e 5c0f                      	subi temp1, -'1' ; Add the value of character ‘1’    //key pressed is saved as ascii
00017f 30b1                      	cpi r27,1
000180 f1c9                      	breq Adminjmp
000181 940c 0238                 	jmp checkEmpty
                                 
                                 
                                 
                                 letters:
                                 	
000183 e302                      	ldi temp1, 0b00110010
000184 0f04                      	add temp1, row
                                 
000185 30b1                      	cpi r27, 1
000186 f5a9                      	brne convert_end
                                 	
000187 3040                      	cpi row,0
000188 f029                      	breq IncreaseCost
000189 3041                      	cpi row,1
00018a f079                      	breq DecreaseCost
00018b 3042                      	cpi row,2
00018c f301                      	breq SetZero
                                 
00018d cfc1                      	rjmp KeypadLoop
                                 
                                 IncreaseCost:
                                 	
00018e 2f08                      	mov temp1, temp4
00018f 5d00                      	subi temp1,-'0'
                                 	
000190 d303                      	rcall returnInventory
                                 
000191 8108                      	ld temp1, Y
000192 3003                      	cpi temp1, 3
000193 f141                      	breq convert_end
                                 
000194 9503                      	inc temp1
000195 8308                      	st Y, temp1
                                 
000196 2f08                      	mov temp1, temp4
000197 5d00                      	subi temp1, -'0'
000198 d3cb                      	rcall sleep_100ms
000199 c353                      	rjmp adminMode
                                 
                                 DecreaseCost:
                                 	
00019a 2f08                      	mov temp1, temp4
00019b 5d00                      	subi temp1,-'0'
                                 	
00019c d2f7                      	rcall returnInventory
                                 
00019d 8108                      	ld temp1, Y
00019e 3001                      	cpi temp1, 1
00019f f0e1                      	breq convert_end
                                 
0001a0 950a                      	dec temp1
0001a1 8308                      	st Y, temp1
                                 
0001a2 2f08                      	mov temp1, temp4
0001a3 5d00                      	subi temp1, -'0'
0001a4 d3bf                      	rcall sleep_100ms
0001a5 c347                      	rjmp adminMode
                                 
                                 symbols:
                                 
0001a6 3050                      	cpi col, 0 ; Check if we have a star
0001a7 f041                      	breq star
0001a8 3051                      	cpi col, 1 ; or if we have zero
0001a9 f089                      	breq zero
0001aa e203                      	ldi temp1, '#'
0001ab 30b1                      	cpi r27,1
0001ac f479                      	brne convert_end
0001ad 2799                      	clr flag1
0001ae 27bb                      	clr r27
0001af c11d                      	rjmp DisplaySelectScreen2
                                 	
                                 
                                 star:
                                 
                                 	;ldi temp1,'*'
                                 	
0001b0 3091                      	cpi flag1,1
0001b1 f021                      	breq Flag2Check
                                 	
0001b2 e091                      	ldi flag1, 1
                                 	
0001b3 e071                      	ldi temp3, 1<<TOIE1 ;start timer.
0001b4 9370 006f                 	sts TIMSK1, temp3
                                 
                                 	Flag2Check:
0001b6 30a1                      	cpi r26,1
0001b7 f039                      	breq adminModeInitialJump ;this mode should clear r26 and flag1
                                 	
                                 	;out PORTC, temp1 ; Write value to PORTC
0001b8 940c 014f                 	jmp KeypadLoop
                                 
                                 Adminjmp:
0001ba c332                      	rjmp adminMode
                                 
                                 zero:
                                 
0001bb e300                      	ldi temp1, '0' ; Set to zero
                                 
                                 convert_end:
                                 
0001bc b908                      	out PORTC, temp1 ; Write value to PORTC
0001bd 940c 014f                 	jmp KeypadLoop ; Restart KeypadLoop loop
                                 
                                 .equ LCD_RS = 7
                                 .equ LCD_E = 6
                                 .equ LCD_RW = 5
                                 .equ LCD_BE = 4
                                 
                                 .macro lcd_set
                                 sbi PORTA, @0
                                 .endmacro
                                 .macro lcd_clr
                                 cbi PORTA, @0
                                 .endmacro
                                 
                                 adminModeInitialJump:
                                 	
0001bf 2777                      	clr temp3
0001c0 9370 006f                 	sts TIMSK1, temp3
0001c2 2799                      	clr flag1
0001c3 27aa                      	clr r26
0001c4 940c 044f                 	jmp adminModeInitial
                                 
                                 Timer0: ;Timer overflow 0
                                 
0001c6 e091                      	ldi flag1,1
                                 
0001c7 b70f                      	in temp1, SREG
0001c8 930f                      	push temp1
                                 
0001c9 9513                      	inc timerCounter
                                 
0001ca 3c10                      	cpi timerCounter,192
0001cb f1e9                      	breq displaySelectScreen
                                 
0001cc 910f                      	pop temp1
0001cd bf0f                      	out SREG, temp1
                                 
0001ce 9518                      	reti
                                 
                                 Timer1:
                                 
0001cf 933f                      	push cmask
0001d0 932f                      	push rmask
0001d1 930f                      	push temp1
0001d2 936f                      	push temp2
0001d3 b70f                      	in temp1,SREG
0001d4 930f                      	push temp1
                                 
                                 	
                                 
0001d5 9513                      	inc timerCounter
                                 
                                 
0001d6 ee3f                      	ldi cmask, INITCOLMASK ; initial column mask
                                 
0001d7 9330 010b                 	sts PORTL, cmask ; Otherwise, scan a column.
                                 	
0001d9 ef0f                      	ldi temp1, 0xFF ; Slow down the scan operation.
0001da 950a                      	Hashdelay: dec temp1
0001db f7f1                      	brne Hashdelay  //assuming this counts down to 0 from 255, otherwise, idk.
                                 	
0001dc 9100 0109                 	lds temp1, PINL ; Read PORTA
0001de 700f                      	andi temp1, ROWMASK ; Get the keypad output value
0001df 300f                      	cpi temp1, 0xF ; Check if any row is low???
0001e0 f0d1                      	breq Released ; If yes, find which row is low
                                 	
0001e1 e021                      	ldi rmask, INITROWMASK ; Initialize for row check
                                 
0001e2 0f22                      	lsl rmask
0001e3 0f22                      	lsl rmask
0001e4 0f22                      	lsl rmask
                                 
0001e5 2f60                      	mov temp2, temp1
0001e6 2362                      	and temp2, rmask
0001e7 f009                      	breq StillPressed 
                                 
0001e8 c012                      	rjmp Released
                                 	
                                 StillPressed:
                                 
0001e9 9513                      	inc timerCounter
                                 
                                 	
0001ea b918                      	out PORTC, TimerCounter
                                 	
0001eb 3119                      	cpi timerCounter, 25
0001ec f038                      	brlo Finish
                                 		
0001ed ef00                      	ldi temp1, 0b11110000
0001ee b908                      	out PORTC, temp1
                                 
0001ef e0a1                      	ldi r26,1
0001f0 2777                      	clr temp3
0001f1 9370 006f                 	sts TIMSK1, temp3
                                 
0001f3 2711                      	clr timerCounter
                                 
                                 	Finish:
                                 
0001f4 910f                      	pop temp1
0001f5 bf0f                      	out SREG, temp1
0001f6 916f                      	pop temp2
0001f7 910f                      	pop temp1
0001f8 912f                      	pop rmask
0001f9 913f                      	pop cmask
                                 
0001fa 9518                      	reti
                                 
                                 Released:
                                 	
0001fb 2777                      	clr temp3
0001fc 9370 006f                 	sts TIMSK1, temp3
0001fe 2799                      	clr flag1
                                 
0001ff 2711                      	clr timerCounter
                                 
000200 ef0f                      	ldi temp1, 0b11111111
000201 b908                      	out PORTC, temp1
                                 
000202 910f                      	pop temp1
000203 bf0f                      	out SREG, temp1
000204 916f                      	pop temp2
000205 910f                      	pop temp1
000206 912f                      	pop rmask
000207 913f                      	pop cmask
                                 	
000208 9518                      	reti
                                 
                                 displaySelectScreen:
                                 
000209 2711                      	clr timerCounter
00020a 2799                      	clr flag1
                                 
00020b 2722                      	clr r18 
00020c 9320 006e                 	sts TIMSK0, r18 ; turn off timer.
                                 
00020e e001
00020f d31f
000210 d32e                      	do_lcd_command 0b00000001 ; clear display
000211 e800
000212 d31c
000213 d32b                      	do_lcd_command 0b10000000 ;set cursor to addr 0 on LCD
                                 
000214 e503
000215 d320
000216 d328                      	do_lcd_data 'S'
000217 e605
000218 d31d
000219 d325                      	do_lcd_data 'e'
00021a e60c
00021b d31a
00021c d322                      	do_lcd_data 'l'
00021d e605
00021e d317
00021f d31f                      	do_lcd_data 'e'
000220 e603
000221 d314
000222 d31c                      	do_lcd_data 'c'
000223 e704
000224 d311
000225 d319                      	do_lcd_data 't'
000226 e200
000227 d30e
000228 d316                      	do_lcd_data ' '
000229 e609
00022a d30b
00022b d313                      	do_lcd_data 'i'
00022c e704
00022d d308
00022e d310                      	do_lcd_data 't'
00022f e605
000230 d305
000231 d30d                      	do_lcd_data 'e'
000232 e60d
000233 d302
000234 d30a                      	do_lcd_data 'm'
                                 
000235 910f                      	pop temp1
000236 bf0f                      	out SREG, temp1
                                 
000237 9518                      	reti
                                 
                                 
                                 checkEmpty:
                                 //temp1 is ascii
000238 930f                      	push temp1
000239 5300                      	subi temp1, '0'
00023a 3001                      	cpi temp1, 1
00023b f081                      	breq check1
00023c 3002                      	cpi temp1, 2
00023d f0a9                      	breq check2
00023e 3003                      	cpi temp1, 3
00023f f0d1                      	breq check3
000240 3004                      	cpi temp1, 4
000241 f0f9                      	breq check4
000242 3005                      	cpi temp1, 5
000243 f121                      	breq check5
000244 3006                      	cpi temp1, 6
000245 f149                      	breq check6
000246 3007                      	cpi temp1, 7
000247 f171                      	breq check7
000248 3008                      	cpi temp1, 8
000249 f199                      	breq check8
00024a 3009                      	cpi temp1, 9
00024b f1c1                      	breq check9
                                 
                                 	check1:
00024c e0e0                      		ldi ZL, low(item1)
00024d e0f2                      		ldi ZH, high(item1)
00024e 8160                      		ld temp2, Z
00024f 910f                      		pop temp1
000250 3060                      		cpi temp2, 0
000251 f1c9                      		breq EmptyScreen
000252 c0a3                      		rjmp CoinScreen
                                 	check2:
000253 e0e2                      		ldi ZL, low(item2)
000254 e0f2                      		ldi ZH, high(item2)
000255 8160                      		ld temp2, Z
000256 910f                      		pop temp1
000257 3060                      		cpi temp2, 0
000258 f191                      		breq EmptyScreen
000259 c09c                      		rjmp CoinScreen
                                 	check3:
00025a e0e4                      		ldi ZL, low(item3)
00025b e0f2                      		ldi ZH, high(item3)
00025c 8160                      		ld temp2, Z
00025d 910f                      		pop temp1
00025e 3060                      		cpi temp2, 0
00025f f159                      		breq EmptyScreen
000260 c095                      		rjmp CoinScreen
                                 	check4:
000261 e0e6                      		ldi ZL, low(item4)
000262 e0f2                      		ldi ZH, high(item4)
000263 8160                      		ld temp2, Z
000264 910f                      		pop temp1
000265 3060                      		cpi temp2, 0
000266 f121                      		breq EmptyScreen
000267 c08e                      		rjmp CoinScreen
                                 	check5:
000268 e0e8                      		ldi ZL, low(item5)
000269 e0f2                      		ldi ZH, high(item5)
00026a 8160                      		ld temp2, Z
00026b 910f                      		pop temp1
00026c 3060                      		cpi temp2, 0
00026d f0e9                      		breq EmptyScreen
00026e c087                      		rjmp CoinScreen
                                 	check6:
00026f e0ea                      		ldi ZL, low(item6)
000270 e0f2                      		ldi ZH, high(item6)
000271 8160                      		ld temp2, Z
000272 910f                      		pop temp1
000273 3060                      		cpi temp2, 0
000274 f0b1                      		breq EmptyScreen
000275 c080                      		rjmp CoinScreen
                                 	check7:
000276 e0ec                      		ldi ZL, low(item7)
000277 e0f2                      		ldi ZH, high(item7)
000278 8160                      		ld temp2, Z
000279 910f                      		pop temp1
00027a 3060                      		cpi temp2, 0
00027b f079                      		breq EmptyScreen
00027c c079                      		rjmp CoinScreen
                                 	check8:
00027d e0ee                      		ldi ZL, low(item8)
00027e e0f2                      		ldi ZH, high(item8)
00027f 8160                      		ld temp2, Z
000280 910f                      		pop temp1
000281 3060                      		cpi temp2, 0
000282 f041                      		breq EmptyScreen
000283 c072                      		rjmp CoinScreen
                                 	check9:
000284 e1e0                      		ldi ZL, low(item9)
000285 e0f2                      		ldi ZH, high(item9)
000286 8160                      		ld temp2, Z
000287 910f                      		pop temp1
000288 3060                      		cpi temp2, 0
000289 f009                      		breq EmptyScreen
00028a c06b                      		rjmp CoinScreen
                                 
                                 	
                                 EmptyScreen:
                                 		
00028b 930f                      		push temp1
                                 
00028c e001
00028d d2a1
00028e d2b0                      		do_lcd_command 0b00000001
00028f e40f
000290 d2a5
000291 d2ad                      		do_lcd_data 'O'
000292 e705
000293 d2a2
000294 d2aa                      		do_lcd_data 'u'
000295 e704
000296 d29f
000297 d2a7                      		do_lcd_data 't'
000298 e200
000299 d29c
00029a d2a4                      		do_lcd_data ' '
00029b e60f
00029c d299
00029d d2a1                      		do_lcd_data 'o'
00029e e606
00029f d296
0002a0 d29e                      		do_lcd_data 'f'
0002a1 e200
0002a2 d293
0002a3 d29b                      		do_lcd_data ' '
0002a4 e703
0002a5 d290
0002a6 d298                      		do_lcd_data 's'
0002a7 e704
0002a8 d28d
0002a9 d295                      		do_lcd_data 't'
0002aa e60f
0002ab d28a
0002ac d292                      		do_lcd_data 'o'
0002ad e603
0002ae d287
0002af d28f                      		do_lcd_data 'c'
0002b0 e60b
0002b1 d284
0002b2 d28c                      		do_lcd_data 'k'
                                 
0002b3 ea08
0002b4 d27a
0002b5 d289                      		do_lcd_command 0b10101000
0002b6 910f                      		pop temp1
0002b7 2f00
0002b8 d27d
0002b9 d285                      		do_lcd_data_r temp1
                                 
0002ba ef0f                      		ser temp1
0002bb b908                      		out PORTC, temp1
0002bc d2b4                      		rcall sleep_500ms
0002bd 2700                      		clr temp1
0002be b908                      		out PORTC, temp1
0002bf d2b1                      		rcall sleep_500ms
0002c0 ef0f                      		ser temp1
0002c1 b908                      		out PORTC, temp1
0002c2 d2ae                      		rcall sleep_500ms
0002c3 2700                      		clr temp1
0002c4 b908                      		out PORTC, temp1
0002c5 d2ab                      		rcall sleep_500ms
                                 		
0002c6 ef0f                      		ser temp1
0002c7 b908                      		out PORTC, temp1
0002c8 d2a8                      		rcall sleep_500ms
0002c9 2700                      		clr temp1
0002ca b908                      		out PORTC, temp1
0002cb d2a5                      		rcall sleep_500ms
                                 		
                                 		
0002cc c000                      		rjmp displaySelectScreen2
                                 
                                 
                                 displaySelectScreen2:
                                 
                                 
0002cd e001
0002ce d260
0002cf d26f                      	do_lcd_command 0b00000001 ; clear display
0002d0 e800
0002d1 d25d
0002d2 d26c                      	do_lcd_command 0b10000000 ;set cursor to addr 0 on LCD
                                 
0002d3 e503
0002d4 d261
0002d5 d269                      	do_lcd_data 'S'
0002d6 e605
0002d7 d25e
0002d8 d266                      	do_lcd_data 'e'
0002d9 e60c
0002da d25b
0002db d263                      	do_lcd_data 'l'
0002dc e605
0002dd d258
0002de d260                      	do_lcd_data 'e'
0002df e603
0002e0 d255
0002e1 d25d                      	do_lcd_data 'c'
0002e2 e704
0002e3 d252
0002e4 d25a                      	do_lcd_data 't'
0002e5 e200
0002e6 d24f
0002e7 d257                      	do_lcd_data ' '
0002e8 e609
0002e9 d24c
0002ea d254                      	do_lcd_data 'i'
0002eb e704
0002ec d249
0002ed d251                      	do_lcd_data 't'
0002ee e605
0002ef d246
0002f0 d24e                      	do_lcd_data 'e'
0002f1 e60d
0002f2 d243
0002f3 d24b                      	do_lcd_data 'm'
                                 
0002f4 d27c                      	rcall sleep_500ms
                                 
0002f5 ce59                      	rjmp KeypadLoop
                                 
                                 
                                 CoinScreen:
                                 	
0002f6 930f                      	push temp1
0002f7 2722                      	clr r18 
0002f8 9320 006e                 	sts TIMSK0, r18 ; turn off timer.
                                 
0002fa e001
0002fb d233
0002fc d242                      	do_lcd_command 0b00000001 ; clear display
0002fd e800
0002fe d230
0002ff d23f                      	do_lcd_command 0b10000000 ;set cursor to addr 0 on LCD
                                 
000300 e409
000301 d234
000302 d23c                      	do_lcd_data 'I'
000303 e60e
000304 d231
000305 d239                      	do_lcd_data 'n'
000306 e703
000307 d22e
000308 d236                      	do_lcd_data 's'
000309 e605
00030a d22b
00030b d233                      	do_lcd_data 'e'
00030c e702
00030d d228
00030e d230                      	do_lcd_data 'r'
00030f e704
000310 d225
000311 d22d                      	do_lcd_data 't'
000312 e200
000313 d222
000314 d22a                      	do_lcd_data ' '
000315 e603
000316 d21f
000317 d227                      	do_lcd_data 'c'
000318 e60f
000319 d21c
00031a d224                      	do_lcd_data 'o'
00031b e609
00031c d219
00031d d221                      	do_lcd_data 'i'
00031e e60e
00031f d216
000320 d21e                      	do_lcd_data 'n'
000321 e703
000322 d213
000323 d21b                      	do_lcd_data 's'
000324 e200
000325 d210
000326 d218                      	do_lcd_data ' '
000327 e203
000328 d20d
000329 d215                      	do_lcd_data '#'
                                 	;subi temp1, -'1'
00032a 910f                      	pop temp1
00032b 2f60                      	mov temp2,temp1
00032c 930f                      	push temp1
00032d 2f06
00032e d207
00032f d20f                      	do_lcd_data_r temp2
                                 	
000330 ea08
000331 d1fd
000332 d20c                      	do_lcd_command 0b10101000
000333 c000                      	rjmp InsertCoin
                                 
                                 	
                                 
                                 	.macro HashLoop
                                 
                                 	ldi cmask, INITCOLMASK ; initial column mask
                                 	lsl cmask
                                 	lsl cmask  //third column
                                 
                                 	sts PORTL, cmask ; Otherwise, scan a column.
                                 	
                                 	ldi temp1, 0xFF ; Slow down the scan operation.
                                 	Hashdelay: dec temp1
                                 	brne Hashdelay  //assuming this counts down to 0 from 255, otherwise, idk.
                                 	
                                 	lds temp1, PINL ; Read PORTA
                                 	andi temp1, ROWMASK ; Get the keypad output value
                                 	cpi temp1, 0xF ; Check if any row is low???
                                 	breq @0 ; If yes, find which row is low
                                 	
                                 	ldi rmask, INITROWMASK ; Initialize for row check
                                 
                                 	lsl rmask
                                 	lsl rmask
                                 	lsl rmask
                                 
                                 	mov temp2, temp1
                                 	and temp2, rmask 
                                 	breq CoinReturn
                                 	
                                 	rjmp @0
                                 	.endmacro
                                 
                                 InsertCoin:
                                 	
000334 910f                      	pop temp1
                                 
000335 d15e                      	rcall ReturnInventory
000336 8168                      	ld temp2,Y
                                 
000337 930f                      	push temp1
                                 
000338 2788                      	clr temp4
000339 2777                      	clr temp3
00033a b978                      	out PORTC, temp3
00033b ea08
00033c d1f2
00033d d201                      	do_lcd_command 0b10101000
                                 	
00033e 2f06                      	mov temp1,temp2
00033f 5d00                      	subi temp1,-'0'
000340 2f00
000341 d1f4
000342 d1fc                      	do_lcd_data_r temp1
                                 
                                 	FirstZeroLoop:
000343 930f                      		push temp1
000344 936f                      		push temp2
                                 
000345 ee3f
000346 0f33
000347 0f33
000348 9330 010b
00034a ef0f
00034b 950a
00034c f7f1
00034d 9100 0109
00034f 700f
000350 300f
000351 f041
000352 e021
000353 0f22
000354 0f22
000355 0f22
000356 2f60
000357 2362
000358 f141
000359 c000                      		HashLoop Loop2c
                                 		Loop2c:
                                 
00035a 916f                      		pop temp2 
00035b 910f                      		pop temp1 
                                 
00035c 9100 0106                 		lds temp1, PINK
00035e 7001                      		andi temp1, 0b00000001
                                 		
                                 
00035f 3000                      		cpi temp1, 0
000360 f711                      		brne FirstZeroLoop
000361 c000                      		rjmp SecondOneLoop
                                 
                                 	SecondOneLoop:
                                 
000362 9100 0106                 		lds temp1, PINK
                                 		
000364 930f                      		push temp1
000365 936f                      		push temp2
                                 
000366 ee3f
000367 0f33
000368 0f33
000369 9330 010b
00036b ef0f
00036c 950a
00036d f7f1
00036e 9100 0109
000370 700f
000371 300f
000372 f041
000373 e021
000374 0f22
000375 0f22
000376 0f22
000377 2f60
000378 2362
000379 f039
00037a c000                      		HashLoop Loopc
                                 		Loopc:
                                 		
00037b 916f                      		pop temp2 
00037c 910f                      		pop temp1 
                                 
00037d 7001                      		andi temp1, 0b00000001
00037e 3001                      		cpi temp1, 1
00037f f711                      		brne SecondOneLoop
000380 c011                      		rjmp ThirdZeroLoop 
                                 
                                 	CoinReturn:
                                 
000381 3080                      		cpi temp4,0
000382 f071                      		breq JumpDisplay
000383 958a                      		dec temp4
                                 	
000384 ef0f                      		ser temp1					
000385 9300 0099                 		sts OCR3AH, temp1
000387 9300 0098                 		sts OCR3AL, temp1
                                 	
000389 d1e0                      		rcall sleep_250ms
                                 
00038a 2700                      		clr temp1					
00038b 9300 0099                 		sts OCR3AH, temp1
00038d 9300 0098                 		sts OCR3AL, temp1
                                 	
00038f d1da                      		rcall sleep_250ms
000390 cff0                      		rjmp CoinReturn
                                 
                                 		JumpDisplay:
000391 cf3b                      		rjmp displaySelectScreen2
                                 		
                                 	ThirdZeroLoop:
                                 
000392 930f                      		push temp1
000393 936f                      		push temp2
                                 			
000394 ee3f
000395 0f33
000396 0f33
000397 9330 010b
000399 ef0f
00039a 950a
00039b f7f1
00039c 9100 0109
00039e 700f
00039f 300f
0003a0 f041
0003a1 e021
0003a2 0f22
0003a3 0f22
0003a4 0f22
0003a5 2f60
0003a6 2362
0003a7 f2c9
0003a8 c000                      		HashLoop Loop3c
                                 		Loop3c:
                                 			
0003a9 916f                      		pop temp2
0003aa 910f                      		pop temp1 
                                 
0003ab 9100 0106                 		lds temp1, PINK
0003ad 7001                      		andi temp1, 0b00000001
                                 		
                                 
0003ae 3000                      		cpi temp1, 0
0003af f711                      		brne ThirdZeroLoop
                                 		
0003b0 9583                      		inc temp4
                                 		
0003b1 956a                      		dec temp2
                                 		
0003b2 2f06                      		mov temp1,temp2
0003b3 5d00                      		subi temp1,-'0'
0003b4 0f77                      		lsl temp3
0003b5 6071                      		ori temp3, 0b00000001
                                 
0003b6 930f                      		push temp1
                                 
0003b7 b978                      		out PORTC, temp3
0003b8 ea08
0003b9 d175
0003ba d184                      		do_lcd_command 0b10101000
                                 		
0003bb 910f                      		pop temp1
0003bc 2f00
0003bd d178
0003be d180                      		do_lcd_data_r temp1
0003bf 3060                      		cpi temp2, 0
0003c0 f009                      		breq DeliverScreen
0003c1 cf81                      		rjmp FirstZeroLoop
                                 		 
                                 
                                 
                                 DeliverScreen:
                                 	;cli  //disable all input related interrupts
                                 	
0003c2 ef0f                      	ser temp1
0003c3 b90d                      	out DDRE, temp1
0003c4 b907                      	out DDRC, temp1
                                 	
                                 	;ldi temp1,0b10101010
                                 	;out PORTC, temp1
0003c5 e001
0003c6 d168
0003c7 d177                      	do_lcd_command 0b00000001
0003c8 e404
0003c9 d16c
0003ca d174                      	do_lcd_data 'D'
0003cb e605
0003cc d169
0003cd d171                      	do_lcd_data 'e'
0003ce e60c
0003cf d166
0003d0 d16e                      	do_lcd_data 'l'
0003d1 e609
0003d2 d163
0003d3 d16b                      	do_lcd_data 'i'
0003d4 e706
0003d5 d160
0003d6 d168                      	do_lcd_data 'v'
0003d7 e605
0003d8 d15d
0003d9 d165                      	do_lcd_data 'e'
0003da e702
0003db d15a
0003dc d162                      	do_lcd_data 'r'
0003dd e609
0003de d157
0003df d15f                      	do_lcd_data 'i'
0003e0 e60e
0003e1 d154
0003e2 d15c                      	do_lcd_data 'n'
0003e3 e607
0003e4 d151
0003e5 d159                      	do_lcd_data 'g'
0003e6 e200
0003e7 d14e
0003e8 d156                      	do_lcd_data ' '
0003e9 e409
0003ea d14b
0003eb d153                      	do_lcd_data 'I'
0003ec e704
0003ed d148
0003ee d150                      	do_lcd_data 't'
0003ef e605
0003f0 d145
0003f1 d14d                      	do_lcd_data 'e'
0003f2 e60d
0003f3 d142
0003f4 d14a                      	do_lcd_data 'm'
                                 
0003f5 916f                      	pop temp2
0003f6 5360                      	subi temp2, '0'
                                 
0003f7 d00e                      	rcall decrementInventory
                                 
0003f8 ef0f                      	ser temp1					; connected to PE4 (externally labelled PE2)
0003f9 9300 0099                 	sts OCR3AH, temp1
0003fb 9300 0098                 	sts OCR3AL, temp1
                                 
0003fd d179                      	rcall sleep_1000ms
0003fe d178                      	rcall sleep_1000ms
0003ff d177                      	rcall sleep_1000ms
                                 
000400 2700                      	clr temp1					; connected to PE4 (externally labelled PE2)
000401 9300 0099                 	sts OCR3AH, temp1
000403 9300 0098                 	sts OCR3AL, temp1
                                 
000405 cec7                      	rjmp displaySelectScreen2
                                 
                                 
                                 	
                                 decrementInventory:
                                 	
000406 3061                      	cpi temp2, 1
000407 f089                      	breq decrement1
000408 3062                      	cpi temp2, 2
000409 f0a9                      	breq decrement2
00040a 3063                      	cpi temp2, 3
00040b f0c9                      	breq decrement3
00040c 3064                      	cpi temp2, 4
00040d f0e9                      	breq decrement4
00040e 3065                      	cpi temp2, 5
00040f f109                      	breq decrement5
000410 3066                      	cpi temp2, 6
000411 f129                      	breq decrement6
000412 3067                      	cpi temp2, 7
000413 f149                      	breq decrement7
000414 3068                      	cpi temp2, 8
000415 f169                      	breq decrement8
000416 3069                      	cpi temp2, 9
000417 f189                      	breq decrement9
000418 9508                      	ret
                                 	
                                 	decrement1:
                                 		
000419 e0e0                      		ldi ZL, low(item1)
00041a e0f2                      		ldi ZH, high(item1)
00041b 8100                      		ld temp1, Z
                                 		
                                 		
00041c 950a                      		dec temp1
                                 		//out PORTC, temp1
00041d 8300                      		st Z, temp1
                                 
00041e 9508                      		ret
                                 	decrement2:
                                 		
00041f e0e2                      		ldi ZL, low(item2)
000420 e0f2                      		ldi ZH, high(item2)
000421 8100                      		ld temp1, Z
                                 		
                                 		//out PORTC, temp1
                                 		
000422 950a                      		dec temp1
000423 8300                      		st Z, temp1
000424 9508                      		ret
                                 	
                                 	decrement3:
                                 		
000425 e0e4                      		ldi ZL, low(item3)
000426 e0f2                      		ldi ZH, high(item3)
                                 		
000427 8100                      		ld temp1, Z
                                 		//out PORTC, temp1
000428 950a                      		dec temp1
                                 
000429 8300                      		st Z, temp1
00042a 9508                      		ret
                                 	
                                 	decrement4:
00042b e0e6                      		ldi ZL, low(item4)
00042c e0f2                      		ldi ZH, high(item4)
00042d 8100                      		ld temp1, Z
                                 		
00042e 950a                      		dec temp1
                                 		//out PORTC, temp1
00042f 8300                      		st Z, temp1
000430 9508                      		ret
                                 
                                 	decrement5:
000431 e0e8                      		ldi ZL, low(item5)
000432 e0f2                      		ldi ZH, high(item5)
000433 8100                      		ld temp1, Z
                                 		
000434 950a                      		dec temp1
                                 		//out PORTC, temp1
000435 8300                      		st Z, temp1
000436 9508                      		ret
                                 	
                                 	decrement6:
                                 		
000437 e0ea                      		ldi ZL, low(item6)
000438 e0f2                      		ldi ZH, high(item6)
000439 8100                      		ld temp1, Z
                                 		
                                 		//out PORTC, temp1
00043a 950a                      		dec temp1
00043b 8300                      		st Z, temp1
00043c 9508                      		ret
                                 	
                                 	decrement7:
                                 		
00043d e0ec                      		ldi ZL, low(item7)
00043e e0f2                      		ldi ZH, high(item7)
00043f 8100                      		ld temp1, Z
                                 		//out PORTC, temp1
                                 
000440 950a                      		dec temp1
000441 8300                      		st Z, temp1
000442 9508                      		ret
                                 	
                                 	decrement8:
000443 e0ee                      		ldi ZL, low(item8)
000444 e0f2                      		ldi ZH, high(item8)
000445 8100                      		ld temp1, Z
                                 		//out PORTC, temp1
                                 
000446 950a                      		dec temp1
000447 8300                      		st Z, temp1
000448 9508                      		ret
                                 	
                                 	decrement9:
000449 e1e0                      		ldi ZL, low(item9)
00044a e0f2                      		ldi ZH, high(item9)
00044b 8100                      		ld temp1, Z
                                 		//out PORTC, temp1
                                 
00044c 950a                      		dec temp1
00044d 8300                      		st Z, temp1
00044e 9508                      		ret
                                 
                                 adminModeInitial:
                                 
00044f e001
000450 d0de
000451 d0ed                      	do_lcd_command 0b00000001
000452 e401
000453 d0e2
000454 d0ea                      	do_lcd_data 'A'
000455 e604
000456 d0df
000457 d0e7                      	do_lcd_data 'd'
000458 e60d
000459 d0dc
00045a d0e4                      	do_lcd_data 'm'
00045b e609
00045c d0d9
00045d d0e1                      	do_lcd_data 'i'
00045e e60e
00045f d0d6
000460 d0de                      	do_lcd_data 'n'
000461 e200
000462 d0d3
000463 d0db                      	do_lcd_data ' '
000464 e60d
000465 d0d0
000466 d0d8                      	do_lcd_data 'm'
000467 e60f
000468 d0cd
000469 d0d5                      	do_lcd_data 'o'
00046a e604
00046b d0ca
00046c d0d2                      	do_lcd_data 'd'
00046d e605
00046e d0c7
00046f d0cf                      	do_lcd_data 'e'
000470 e200
000471 d0c4
000472 d0cc                      	do_lcd_data ' '
000473 e301
000474 d0c1
000475 d0c9                      	do_lcd_data '1'
                                 	
000476 ea08
000477 d0b7
000478 d0c6                      	do_lcd_command 0b10101000
                                 
000479 930f                      	push temp1
00047a e0e0                      	ldi ZL, low(item1)   //z holds pointer to item1's inventory.
00047b e0f2                      	ldi ZH, high(item1)
00047c 8100                      	ld temp1, Z
00047d 5d00                      	subi temp1, -'0'
00047e 2f00
00047f d0b6
000480 d0be                      	do_lcd_data_r temp1 
000481 b908                      	out PORTC, temp1    //since item 1 will initially have only 1 item, no conversion is needed
                                 	
000482 eb06
000483 d0ab
000484 d0ba                      	do_lcd_command 0b10110110
000485 e204
000486 d0af
000487 d0b7                      	do_lcd_data '$'
000488 e0e1                      	ldi ZL, low(item1Cost)
000489 e0f2                      	ldi ZH, high(item1Cost)
00048a 8100                      	ld temp1, Z
00048b 5d00                      	subi temp1, -'0'
00048c 2f00
00048d d0a8
00048e d0b0                      	do_lcd_data_r temp1 
00048f 910f                      	pop temp1
                                 
                                 
000490 e081                      	ldi temp4, 1
000491 e0b1                      	ldi r27,1
000492 e091                      	ldi flag1,1
                                 
000493 ccbb                      	rjmp KeypadLoop
                                 
                                 
                                 returnInventory:
                                 	 
000494 930f                      	push temp1
000495 5300                      	subi temp1, '0'
000496 3001                      	cpi temp1, 1
000497 f079                      	breq return1
000498 3002                      	cpi temp1, 2
000499 f0a9                      	breq return2
00049a 3003                      	cpi temp1, 3
00049b f0d9                      	breq return3
00049c 3004                      	cpi temp1, 4
00049d f109                      	breq return4
00049e 3005                      	cpi temp1, 5
00049f f139                      	breq return5
0004a0 3006                      	cpi temp1, 6
0004a1 f169                      	breq return6
0004a2 3007                      	cpi temp1, 7
0004a3 f199                      	breq return7
0004a4 3008                      	cpi temp1, 8
0004a5 f1c9                      	breq return8
0004a6 c040                      	rjmp return9
                                 
                                 	return1:
0004a7 e0e0                      		ldi ZL, low(item1)    //inventory amount
0004a8 e0f2                      		ldi ZH, high(item1)
0004a9 e0c1                      		ldi YL, low(item1Cost) 	//item cost
0004aa e0d2                      		ldi YH, high(item1Cost)	
0004ab e001                      		ldi temp1, 0b00000001
0004ac b908                      		out PORTC, temp1
0004ad 910f                      		pop temp1
0004ae 9508                      		ret
                                 	return2:
0004af e0e2                      		ldi ZL, low(item2)   
0004b0 e0f2                      		ldi ZH, high(item2)
0004b1 e0c3                      		ldi YL, low(item2Cost) 	//item cost
0004b2 e0d2                      		ldi YH, high(item2Cost)
0004b3 e003                      		ldi temp1, 0b00000011
0004b4 b908                      		out PORTC, temp1
0004b5 910f                      		pop temp1
0004b6 9508                      		ret
                                 	return3:
0004b7 e0e4                      		ldi ZL, low(item3)   
0004b8 e0f2                      		ldi ZH, high(item3)
0004b9 e0c5                      		ldi YL, low(item3Cost) 	//item cost
0004ba e0d2                      		ldi YH, high(item3Cost)
0004bb e007                      		ldi temp1, 0b00000111
0004bc b908                      		out PORTC, temp1
0004bd 910f                      		pop temp1
0004be 9508                      		ret
                                 	return4:
0004bf e0e6                      		ldi ZL, low(item4)   
0004c0 e0f2                      		ldi ZH, high(item4)
0004c1 e0c7                      		ldi YL, low(item4Cost) 	//item cost
0004c2 e0d2                      		ldi YH, high(item4Cost)
0004c3 e00f                      		ldi temp1, 0b00001111
0004c4 b908                      		out PORTC, temp1
0004c5 910f                      		pop temp1
0004c6 9508                      		ret
                                 	return5:
0004c7 e0e8                      		ldi ZL, low(item5)   
0004c8 e0f2                      		ldi ZH, high(item5)
0004c9 e0c9                      		ldi YL, low(item5Cost) 	//item cost
0004ca e0d2                      		ldi YH, high(item5Cost)
0004cb e10f                      		ldi temp1, 0b00011111
0004cc b908                      		out PORTC, temp1
0004cd 910f                      		pop temp1
0004ce 9508                      		ret
                                 	return6:
0004cf e0ea                      		ldi ZL, low(item6)   
0004d0 e0f2                      		ldi ZH, high(item6)
0004d1 e0cb                      		ldi YL, low(item6Cost) 	//item cost
0004d2 e0d2                      		ldi YH, high(item6Cost)
0004d3 e30f                      		ldi temp1, 0b00111111
0004d4 b908                      		out PORTC, temp1
0004d5 910f                      		pop temp1
0004d6 9508                      		ret
                                 	return7:
0004d7 e0ec                      		ldi ZL, low(item7)   
0004d8 e0f2                      		ldi ZH, high(item7)
0004d9 e0cd                      		ldi YL, low(item7Cost) 	//item cost
0004da e0d2                      		ldi YH, high(item7Cost)
0004db e70f                      		ldi temp1, 0b01111111
0004dc b908                      		out PORTC, temp1
0004dd 910f                      		pop temp1
0004de 9508                      		ret
                                 	return8:
0004df e0ee                      		ldi ZL, low(item8)   
0004e0 e0f2                      		ldi ZH, high(item8)
0004e1 e0cf                      		ldi YL, low(item8Cost) 	//item cost
0004e2 e0d2                      		ldi YH, high(item8Cost)
0004e3 ef0f                      		ldi temp1, 0b11111111
0004e4 b908                      		out PORTC, temp1
0004e5 910f                      		pop temp1
0004e6 9508                      		ret
                                 	return9:
0004e7 e1e0                      		ldi ZL, low(item9)   
0004e8 e0f2                      		ldi ZH, high(item9)
0004e9 e1c1                      		ldi YL, low(item9Cost) 	//item cost
0004ea e0d2                      		ldi YH, high(item9Cost)
0004eb 910f                      		pop temp1
0004ec 9508                      		ret
                                 
                                 	
                                 
                                 adminMode:
                                 	//how does the program get here?
                                 
0004ed d076                      	rcall sleep_100ms
                                 	
                                 
0004ee 930f                      	push temp1
0004ef dfa4                      	rcall returnInventory  //itll get stuck in a loop here.
                                 
0004f0 e001
0004f1 d03d
0004f2 d04c                      	do_lcd_command 0b00000001
0004f3 e401
0004f4 d041
0004f5 d049                      	do_lcd_data 'A'
0004f6 e604
0004f7 d03e
0004f8 d046                      	do_lcd_data 'd'
0004f9 e60d
0004fa d03b
0004fb d043                      	do_lcd_data 'm'
0004fc e609
0004fd d038
0004fe d040                      	do_lcd_data 'i'
0004ff e60e
000500 d035
000501 d03d                      	do_lcd_data 'n'
000502 e200
000503 d032
000504 d03a                      	do_lcd_data ' '
000505 e60d
000506 d02f
000507 d037                      	do_lcd_data 'm'
000508 e60f
000509 d02c
00050a d034                      	do_lcd_data 'o'
00050b e604
00050c d029
00050d d031                      	do_lcd_data 'd'
00050e e605
00050f d026
000510 d02e                      	do_lcd_data 'e'
000511 e200
000512 d023
000513 d02b                      	do_lcd_data ' '
000514 910f                      	pop temp1
                                 	
000515 2f80                      	mov temp4, temp1
000516 5380                      	subi temp4, '0'
                                 
000517 2f00
000518 d01d
000519 d025                      	do_lcd_data_r temp1 
                                 
00051a ea08
00051b d013
00051c d022                      	do_lcd_command 0b10101000
                                 
00051d 8100                      	ld temp1, Z
00051e 5d00                      	subi temp1,-'0'
00051f 2f00
000520 d015
000521 d01d                      	do_lcd_data_r temp1   //displays inventory of selected item
                                 	
000522 eb06
000523 d00b
000524 d01a                      	do_lcd_command 0b10110110
000525 e204
000526 d00f
000527 d017                      	do_lcd_data '$'		//displays cost of selected item
000528 8108                      	ld temp1, Y
000529 5d00                      	subi temp1,-'0'
00052a 2f00
00052b d00a
00052c d012                      	do_lcd_data_r temp1 
                                 
                                 
00052d 940c 014f                 	jmp KeypadLoop   
                                 	
                                 	
                                 
                                 lcd_command: ; Send a command to the LCD (r16)
                                 
00052f bb01                      	out PORTF, r16
000530 d01f                      	rcall sleep_1ms
000531 9a16                      	lcd_set LCD_E
000532 d01d                      	rcall sleep_1ms
000533 9816                      	lcd_clr LCD_E
000534 d01b                      	rcall sleep_1ms
000535 9508                      	ret
                                 
                                 lcd_data:
                                 
000536 bb01                      	out PORTF, r16
000537 9a17                      	lcd_set LCD_RS
000538 d017                      	rcall sleep_1ms
000539 9a16                      	lcd_set LCD_E
00053a d015                      	rcall sleep_1ms
00053b 9816                      	lcd_clr LCD_E
00053c d013                      	rcall sleep_1ms
00053d 9817                      	lcd_clr LCD_RS
00053e 9508                      	ret
                                 
                                 lcd_wait:
                                 
00053f 930f                      	push r16
000540 2700                      	clr r16
000541 bb00                      	out DDRF, r16
000542 bb01                      	out PORTF, r16
000543 9a15                      	lcd_set LCD_RW
                                 	lcd_wait_loop:
000544 d00b                      	rcall sleep_1ms
000545 9a16                      	lcd_set LCD_E
000546 d009                      	rcall sleep_1ms
000547 b10f                      	in r16, PINF
000548 9816                      	lcd_clr LCD_E
000549 fd07                      	sbrc r16, 7
00054a cff9                      	rjmp lcd_wait_loop
00054b 9815                      	lcd_clr LCD_RW
00054c ef0f                      	ser r16
00054d bb00                      	out DDRF, r16
00054e 910f                      	pop r16
00054f 9508                      	ret
                                 
                                 .equ F_CPU = 16000000
                                 .equ DELAY_1MS = F_CPU / 4 / 1000 - 4
                                 ; 4 cycles per iteration - setup/call-return overhead
                                 
                                 sleep_1ms:
                                 	
000550 938f                      	push r24
000551 939f                      	push r25
000552 e09f                      	ldi r25, high(DELAY_1MS)
000553 e98c                      	ldi r24, low(DELAY_1MS)
                                 
                                 delayloop_1ms:
                                 	
000554 9701                      	sbiw r25:r24, 1
000555 f7f1                      	brne delayloop_1ms
000556 919f                      	pop r25
000557 918f                      	pop r24
000558 9508                      	ret
                                 
                                 sleep_5ms:
                                 
000559 dff6                      	rcall sleep_1ms
00055a dff5                      	rcall sleep_1ms
00055b dff4                      	rcall sleep_1ms
00055c dff3                      	rcall sleep_1ms
00055d dff2                      	rcall sleep_1ms
00055e 9508                      	ret
                                 
                                 sleep_20ms:
                                 
00055f dff9                      	rcall sleep_5ms
000560 dff8                      	rcall sleep_5ms
000561 dff7                      	rcall sleep_5ms
000562 dff6                      	rcall sleep_5ms
000563 9508                      	ret
                                 
                                 sleep_100ms:
                                 	
000564 dffa                      	rcall sleep_20ms
000565 dff9                      	rcall sleep_20ms
000566 dff8                      	rcall sleep_20ms
000567 dff7                      	rcall sleep_20ms
000568 dff6                      	rcall sleep_20ms
000569 9508                      	ret
                                 
                                 sleep_250ms:
00056a dff9                      	rcall sleep_100ms
00056b dff8                      	rcall sleep_100ms
00056c dff2                      	rcall sleep_20ms
00056d dff1                      	rcall sleep_20ms
00056e dfea                      	rcall sleep_5ms
00056f dfe9                      	rcall sleep_5ms
000570 9508                      	ret
                                 sleep_500ms:
                                 	
000571 dff2                      	rcall sleep_100ms
000572 dff1                      	rcall sleep_100ms
000573 dff0                      	rcall sleep_100ms
000574 dfef                      	rcall sleep_100ms
000575 dfee                      	rcall sleep_100ms
000576 9508                      	ret
                                 
                                 sleep_1000ms:
                                 
000577 dff9                      	rcall sleep_500ms
000578 dff8                      	rcall sleep_500ms
000579 9508                      	ret


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega2560" register use summary:
x  :   0 y  :  24 z  :  35 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 488 r17:  10 r18:  43 r19:  22 r20:  11 
r21:   8 r22:  57 r23:  13 r24:  19 r25:  13 r26:   4 r27:   8 r28:  27 
r29:  27 r30:  29 r31:  29 
Registers used: 18 out of 35 (51.4%)

"ATmega2560" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   3 adiw  :   0 and   :   5 
andi  :   8 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  64 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 brlt  :   0 brmi  :   0 
brne  :  13 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   5 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  37 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :  67 cpse  :   0 dec   :  18 eicall:   0 eijmp :   0 elpm  :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   5 inc   :   9 jmp   :  13 ld    :  27 ldd   :   0 ldi   : 322 
lds   :   8 lpm   :   0 lsl   :  22 lsr   :   0 mov   :  27 movw  :   0 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   1 out   :  44 pop   :  50 push  :  28 rcall : 371 ret   :  29 
reti  :   7 rjmp  :  33 rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :   1 sbr   :   0 sbrc  :   1 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   9 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  32 std   :   0 sts   :  29 sub   :   0 subi  :  19 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 34 out of 116 (29.3%)

"ATmega2560" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000af4   2728      0   2728  262144   1.0%
[.dseg] 0x000200 0x000212      0     18     18    8192   0.2%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
