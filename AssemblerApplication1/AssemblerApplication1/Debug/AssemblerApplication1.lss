
AVRASM ver. 2.2.6  C:\Users\Brandon\Desktop\UNI STUFF\comp 2121\2121proj\AssemblerApplication1\AssemblerApplication1\main.asm Thu Jun 01 12:38:30 2017

[builtin](2): Including file 'C:\Program Files (x86)\Atmel\AVR Tools\AvrAssembler2\Appnotes\m2560def.inc'
C:\Users\Brandon\Desktop\UNI STUFF\comp 2121\2121proj\AssemblerApplication1\AssemblerApplication1\main.asm(1): Including file 'C:\Program Files (x86)\Atmel\AVR Tools\AvrAssembler2\Appnotes\m2560def.inc'
[builtin](2): Including file 'C:\Program Files (x86)\Atmel\AVR Tools\AvrAssembler2\Appnotes\m2560def.inc'
C:\Users\Brandon\Desktop\UNI STUFF\comp 2121\2121proj\AssemblerApplication1\AssemblerApplication1\main.asm(1): Including file 'C:\Program Files (x86)\Atmel\AVR Tools\AvrAssembler2\Appnotes\m2560def.inc'
                                 
                                 .include "m2560def.inc"
                                 
                                 ;***** Created: 2011-08-25 20:59 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-08-25
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #define _M2560DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega2560
                                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x98
                                 .equ	SIGNATURE_002	= 0x01
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                                 .equ	PINL	= 0x109	; MEMORY MAPPED
                                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                                 .equ	PINK	= 0x106	; MEMORY MAPPED
                                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                                 .equ	PINH	= 0x100	; MEMORY MAPPED
                                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR5	= 0x1a
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTG	= 0x14
                                 .equ	DDRG	= 0x13
                                 .equ	PING	= 0x12
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 .equ	PORTG5	= 5	; 
                                 .equ	PG5	= 5	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 .equ	DDG5	= 5	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 .equ	PING5	= 5	; 
                                 
                                 
                                 ; ***** PORTH ************************
                                 ; PORTH - PORT H Data Register
                                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                                 .equ	PH0	= 0	; For compatibility
                                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                                 .equ	PH1	= 1	; For compatibility
                                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                                 .equ	PH2	= 2	; For compatibility
                                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                                 .equ	PH3	= 3	; For compatibility
                                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                                 .equ	PH4	= 4	; For compatibility
                                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                                 .equ	PH5	= 5	; For compatibility
                                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                                 .equ	PH6	= 6	; For compatibility
                                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                                 .equ	PH7	= 7	; For compatibility
                                 
                                 ; DDRH - PORT H Data Direction Register
                                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                                 
                                 ; PINH - PORT H Input Pins
                                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                                 
                                 
                                 ; ***** PORTJ ************************
                                 ; PORTJ - PORT J Data Register
                                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                                 .equ	PJ0	= 0	; For compatibility
                                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                                 .equ	PJ1	= 1	; For compatibility
                                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                                 .equ	PJ2	= 2	; For compatibility
                                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                                 .equ	PJ3	= 3	; For compatibility
                                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                                 .equ	PJ4	= 4	; For compatibility
                                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                                 .equ	PJ5	= 5	; For compatibility
                                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                                 .equ	PJ6	= 6	; For compatibility
                                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                                 .equ	PJ7	= 7	; For compatibility
                                 
                                 ; DDRJ - PORT J Data Direction Register
                                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                                 
                                 ; PINJ - PORT J Input Pins
                                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                                 
                                 
                                 ; ***** PORTK ************************
                                 ; PORTK - PORT K Data Register
                                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                                 .equ	PK0	= 0	; For compatibility
                                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                                 .equ	PK1	= 1	; For compatibility
                                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                                 .equ	PK2	= 2	; For compatibility
                                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                                 .equ	PK3	= 3	; For compatibility
                                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                                 .equ	PK4	= 4	; For compatibility
                                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                                 .equ	PK5	= 5	; For compatibility
                                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                                 .equ	PK6	= 6	; For compatibility
                                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                                 .equ	PK7	= 7	; For compatibility
                                 
                                 ; DDRK - PORT K Data Direction Register
                                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                                 
                                 ; PINK - PORT K Input Pins
                                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                                 
                                 
                                 ; ***** PORTL ************************
                                 ; PORTL - PORT L Data Register
                                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                                 .equ	PL0	= 0	; For compatibility
                                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                                 .equ	PL1	= 1	; For compatibility
                                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                                 .equ	PL2	= 2	; For compatibility
                                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                                 .equ	PL3	= 3	; For compatibility
                                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                                 .equ	PL4	= 4	; For compatibility
                                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                                 .equ	PL5	= 5	; For compatibility
                                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                                 .equ	PL6	= 6	; For compatibility
                                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                                 .equ	PL7	= 7	; For compatibility
                                 
                                 ; DDRL - PORT L Data Direction Register
                                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                                 
                                 ; PINL - PORT L Input Pins
                                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_5 **************
                                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                                 
                                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                                 .equ	ICF5	= 5	; Input Capture Flag 5
                                 
                                 ; TCCR5A - Timer/Counter5 Control Register A
                                 .equ	WGM50	= 0	; Waveform Generation Mode
                                 .equ	WGM51	= 1	; Waveform Generation Mode
                                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR5B - Timer/Counter5 Control Register B
                                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                                 .equ	WGM52	= 3	; Waveform Generation Mode
                                 .equ	WGM53	= 4	; Waveform Generation Mode
                                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                                 
                                 ; TCCR5C - Timer/Counter 5 Control Register C
                                 .equ	FOC5C	= 5	; Force Output Compare 5C
                                 .equ	FOC5B	= 6	; Force Output Compare 5B
                                 .equ	FOC5A	= 7	; Force Output Compare 5A
                                 
                                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                                 
                                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                                 .equ	ICF4	= 5	; Input Capture Flag 4
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0	; Waveform Generation Mode
                                 .equ	WGM41	= 1	; Waveform Generation Mode
                                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                                 .equ	WGM42	= 3	; Waveform Generation Mode
                                 .equ	WGM43	= 4	; Waveform Generation Mode
                                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	FOC4C	= 5	; Force Output Compare 4C
                                 .equ	FOC4B	= 6	; Force Output Compare 4B
                                 .equ	FOC4A	= 7	; Force Output Compare 4A
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW00	= 0	; Wait state select bit lower page
                                 .equ	SRW01	= 1	; Wait state select bit lower page
                                 .equ	SRW10	= 2	; Wait state select bit upper page
                                 .equ	SRW11	= 3	; Wait state select bit upper page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRUSART2	= 1	; Power Reduction USART2
                                 .equ	PRUSART3	= 2	; Power Reduction USART3
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register
                                 .equ	ADC8D	= 0	; 
                                 .equ	ADC9D	= 1	; 
                                 .equ	ADC10D	= 2	; 
                                 .equ	ADC11D	= 3	; 
                                 .equ	ADC12D	= 4	; 
                                 .equ	ADC13D	= 5	; 
                                 .equ	ADC14D	= 6	; 
                                 .equ	ADC15D	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** USART2 ***********************
                                 ; UDR2 - USART I/O Data Register
                                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR2A - USART Control and Status Register A
                                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                                 .equ	U2X2	= 1	; Double the USART transmission speed
                                 .equ	UPE2	= 2	; Parity Error
                                 .equ	DOR2	= 3	; Data overRun
                                 .equ	FE2	= 4	; Framing Error
                                 .equ	UDRE2	= 5	; USART Data Register Empty
                                 .equ	TXC2	= 6	; USART Transmitt Complete
                                 .equ	RXC2	= 7	; USART Receive Complete
                                 
                                 ; UCSR2B - USART Control and Status Register B
                                 .equ	TXB82	= 0	; Transmit Data Bit 8
                                 .equ	RXB82	= 1	; Receive Data Bit 8
                                 .equ	UCSZ22	= 2	; Character Size
                                 .equ	TXEN2	= 3	; Transmitter Enable
                                 .equ	RXEN2	= 4	; Receiver Enable
                                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR2C - USART Control and Status Register C
                                 .equ	UCPOL2	= 0	; Clock Polarity
                                 .equ	UCSZ20	= 1	; Character Size
                                 .equ	UCSZ21	= 2	; Character Size
                                 .equ	USBS2	= 3	; Stop Bit Select
                                 .equ	UPM20	= 4	; Parity Mode Bit 0
                                 .equ	UPM21	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL20	= 6	; USART Mode Select
                                 .equ	UMSEL21	= 7	; USART Mode Select
                                 
                                 ; UBRR2H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR2L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART3 ***********************
                                 ; UDR3 - USART I/O Data Register
                                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR3A - USART Control and Status Register A
                                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                                 .equ	U2X3	= 1	; Double the USART transmission speed
                                 .equ	UPE3	= 2	; Parity Error
                                 .equ	DOR3	= 3	; Data overRun
                                 .equ	FE3	= 4	; Framing Error
                                 .equ	UDRE3	= 5	; USART Data Register Empty
                                 .equ	TXC3	= 6	; USART Transmitt Complete
                                 .equ	RXC3	= 7	; USART Receive Complete
                                 
                                 ; UCSR3B - USART Control and Status Register B
                                 .equ	TXB83	= 0	; Transmit Data Bit 8
                                 .equ	RXB83	= 1	; Receive Data Bit 8
                                 .equ	UCSZ32	= 2	; Character Size
                                 .equ	TXEN3	= 3	; Transmitter Enable
                                 .equ	RXEN3	= 4	; Receiver Enable
                                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR3C - USART Control and Status Register C
                                 .equ	UCPOL3	= 0	; Clock Polarity
                                 .equ	UCSZ30	= 1	; Character Size
                                 .equ	UCSZ31	= 2	; Character Size
                                 .equ	USBS3	= 3	; Stop Bit Select
                                 .equ	UPM30	= 4	; Parity Mode Bit 0
                                 .equ	UPM31	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL30	= 6	; USART Mode Select
                                 .equ	UMSEL31	= 7	; USART Mode Select
                                 
                                 ; UBRR3H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR3L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                                 .equ	IOEND	= 0x01ff
                                 .equ	SRAM_START	= 0x0200
                                 .equ	SRAM_SIZE	= 8192
                                 .equ	RAMEND	= 0x21ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 262144
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1f000
                                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1efff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x1fe00
                                 .equ	SECONDBOOTSTART	= 0x1fc00
                                 .equ	THIRDBOOTSTART	= 0x1f800
                                 .equ	FOURTHBOOTSTART	= 0x1f000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                                 
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 
                                 ;***** Created: 2011-08-25 20:59 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-08-25
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 .dseg
                                 .macro do_lcd_command
                                 ldi r16, @0
                                 rcall lcd_command
                                 rcall lcd_wait
                                 .endmacro
                                 
                                 
                                 .macro do_lcd_data
                                 ldi r16, @0
                                 rcall lcd_data
                                 rcall lcd_wait
                                 .endmacro
                                 
                                 .macro do_lcd_data_r
                                 mov r16, @0
                                 rcall lcd_data
                                 rcall lcd_wait
                                 .endmacro
                                 
                                 
000200                           item1: .byte 1
000201                           item1Cost: .byte 1
000202                           item2: .byte 1
000203                           item2Cost: .byte 1
000204                           item3: .byte 1
000205                           item3Cost: .byte 1
000206                           item4: .byte 1
000207                           item4Cost: .byte 1
000208                           item5: .byte 1
000209                           item5Cost: .byte 1
00020a                           item6: .byte 1
00020b                           item6Cost: .byte 1
00020c                           item7: .byte 1
00020d                           item7Cost: .byte 1
00020e                           item8: .byte 1
00020f                           item8Cost: .byte 1
000210                           item9: .byte 1
000211                           item9Cost: .byte 1
                                 
                                 .cseg
                                 
                                  
                                 
                                 .def temp1 = r16
                                 .def timerCounter = r17
                                 .def rmask = r18 ; mask for current row during scan
                                 .def cmask = r19 ; mask for current column during scan
                                 .def row = r20 ; current row number
                                 .def col = r21 ; current column number
                                 .def temp2 = r22
                                 .def temp3 = r23
                                 .def temp4 = r24
                                 .def flag1 = r25
                                 
                                 
                                 
                                 .equ PORTADIR = 0xF0 ; PD7-4: output, PD3-0, input
                                 .equ INITCOLMASK = 0xEF ; scan from the rightmost column,
                                 .equ INITROWMASK = 0x01 ; scan from the top row
                                 .equ ROWMASK = 0x0F ; for obtaining input from Port D
                                 
                                 .org 0x0000
000000 940c 0034                    jmp Main;
000002 940c 0032                    jmp DEFAULT          ; No handling for IRQ0.
000004 940c 0032                    jmp DEFAULT
                                 
                                 .org OVF1addr
000028 940c 0184                 jmp Timer1
                                 
                                 
                                 .org OVF0addr
00002e 940c 017b                 jmp Timer0
                                 
                                 
000030 940c 0032                 jmp DEFAULT        
000032 9518                      DEFAULT:  reti 
                                 
                                 EXT_INT0:
000033 9518                      	reti
                                 
                                 Main:
                                 
000034 2711                      	clr r17
000035 2722                      	clr r18
000036 2733                      	clr r19
000037 2744                      	clr r20
000038 2755                      	clr r21
000039 2766                      	clr r22
00003a 2799                      	clr flag1
00003b 27aa                      	clr r26 //flag2
00003c 27bb                      	clr r27 //admin flag
                                 	
00003d 9360 0107                 	sts DDRK, r22
                                 
00003f e0d2                      	ldi YH,high(item1)
000040 e0c0                      	ldi YL,low(item1)
000041 e001                      	ldi temp1, 1
000042 8308                      	st y, temp1
                                 
000043 e0d2                      	ldi YH,high(item1Cost)
000044 e0c1                      	ldi YL,low(item1Cost)
000045 e001                      	ldi temp1,1
000046 8308                      	st y, temp1
                                 
000047 e0d2                      	ldi YH,high(item2)
000048 e0c2                      	ldi YL,low(item2)
000049 e002                      	ldi temp1, 2
00004a 8308                      	st y, temp1
                                 
00004b e0d2                      	ldi YH,high(item2Cost)
00004c e0c3                      	ldi YL,low(item2Cost)
00004d e002                      	ldi temp1,2
00004e 8308                      	st y, temp1
                                 
00004f e0d2                      	ldi YH,high(item3)
000050 e0c4                      	ldi YL,low(item3)
000051 e003                      	ldi temp1, 3
000052 8308                      	st y, temp1
                                 
000053 e0d2                      	ldi YH,high(item3Cost)
000054 e0c5                      	ldi YL,low(item3Cost)
000055 e001                      	ldi temp1,1
000056 8308                      	st y, temp1
                                 
000057 e0d2                      	ldi YH,high(item4)
000058 e0c6                      	ldi YL,low(item4)
000059 e004                      	ldi temp1, 4
00005a 8308                      	st y, temp1
                                 
00005b e0d2                      	ldi YH,high(item4Cost)
00005c e0c7                      	ldi YL,low(item4Cost)
00005d e002                      	ldi temp1,2
00005e 8308                      	st y, temp1
                                 
00005f e0d2                      	ldi YH,high(item5)
000060 e0c8                      	ldi YL,low(item5)
000061 e005                      	ldi temp1, 5
000062 8308                      	st y, temp1
                                 
000063 e0d2                      	ldi YH,high(item5Cost)
000064 e0c9                      	ldi YL,low(item5Cost)
000065 e001                      	ldi temp1,1
000066 8308                      	st y, temp1
                                 
000067 e0d2                      	ldi YH,high(item6)
000068 e0ca                      	ldi YL,low(item6)
000069 e006                      	ldi temp1, 6
00006a 8308                      	st y, temp1
                                 
00006b e0d2                      	ldi YH,high(item6Cost)
00006c e0cb                      	ldi YL,low(item6Cost)
00006d e002                      	ldi temp1,2
00006e 8308                      	st y, temp1
                                 
00006f e0d2                      	ldi YH,high(item7)
000070 e0cc                      	ldi YL,low(item7)
000071 e007                      	ldi temp1, 7
000072 8308                      	st y, temp1
                                 
000073 e0d2                      	ldi YH,high(item7Cost)
000074 e0cd                      	ldi YL,low(item7Cost)
000075 e001                      	ldi temp1,1
000076 8308                      	st y, temp1
                                 
000077 e0d2                      	ldi YH,high(item8)
000078 e0ce                      	ldi YL,low(item8)
000079 e008                      	ldi temp1, 8
00007a 8308                      	st y, temp1
                                 
00007b e0d2                      	ldi YH,high(item8Cost)
00007c e0cf                      	ldi YL,low(item8Cost)
00007d e002                      	ldi temp1,2
00007e 8308                      	st y, temp1
                                 
00007f e0d2                      	ldi YH,high(item9)
000080 e1c0                      	ldi YL,low(item9)
000081 e009                      	ldi temp1, 9
000082 8308                      	st y, temp1
                                 
000083 e0d2                      	ldi YH,high(item9Cost)
000084 e1c1                      	ldi YL,low(item9Cost)
000085 e001                      	ldi temp1,1
000086 8308                      	st y, temp1
                                 
                                 
000087 2700                      	clr temp1					; connected to PE4 (externally labelled PE2)
000088 9300 0099                 	sts OCR3AH, temp1
00008a 9300 0098                 	sts OCR3AL, temp1
                                 
00008c e001                      	ldi temp1, (1 << CS30) 		; set the Timer3 to Phase Correct PWM mode. 
00008d 9300 0091                 	sts TCCR3B, temp1
00008f ea03                      	ldi temp1, (1 << WGM31)|(1<< WGM30)|(1<<COM3B1)|(1<<COM3A1)
000090 9300 0090                 	sts TCCR3A, temp1
                                 
000092 ef0f                      	ser r16
000093 b907                      	out DDRC, r16
000094 b90d                      	out DDRE, temp1
                                 
000095 ef0f                      	ldi r16, low(RAMEND)
000096 bf0d                      	out SPL, r16
000097 e201                      	ldi r16, high(RAMEND)
000098 bf0e                      	out SPH, r16
                                 
000099 ef0f                      	ser r16 ; LCD setup
00009a bb00                      	out DDRF, r16
00009b b901                      	out DDRA, r16
00009c 2700                      	clr r16
00009d bb01                      	out PORTF, r16
00009e b902                      	out PORTA, r16
                                 
00009f e308
0000a0 d43f
0000a1 d44e                      	do_lcd_command 0b00111000 ; 2x5x7
0000a2 d467                      	rcall sleep_5ms
0000a3 e308
0000a4 d43b
0000a5 d44a                      	do_lcd_command 0b00111000 ; 2x5x7
0000a6 d45a                      	rcall sleep_1ms
0000a7 e308
0000a8 d437
0000a9 d446                      	do_lcd_command 0b00111000 ; 2x5x7
0000aa e308
0000ab d434
0000ac d443                      	do_lcd_command 0b00111000 ; 2x5x7
0000ad e008
0000ae d431
0000af d440                      	do_lcd_command 0b00001000 ; display off?
0000b0 e001
0000b1 d42e
0000b2 d43d                      	do_lcd_command 0b00000001 ; clear display
0000b3 e006
0000b4 d42b
0000b5 d43a                      	do_lcd_command 0b00000110 ; increment, no display shift
0000b6 e00e
0000b7 d428
0000b8 d437                      	do_lcd_command 0b00001110 ; Cursor on, bar, no blink
0000b9 e800
0000ba d425
0000bb d434                      	do_lcd_command 0b10000000
                                 
0000bc e020                      	ldi r18, 0b00000000 ;Timer setup for start screen 3 second wait
0000bd bd24                      	out TCCR0A, r18
0000be e025                      	ldi r18, 0b00000101   
0000bf bd25                      	out TCCR0B, r18
0000c0 e021                      	ldi r18, 1<<TOIE0
0000c1 9320 006e                 	sts TIMSK0, r18
                                 
0000c3 e020                      	ldi r18, 0b00000000 ;Timer setup for start screen 3 second wait
0000c4 9320 0080                 	sts TCCR1A, r18
0000c6 e023                      	ldi r18, 0b00000011   
0000c7 9320 0081                 	sts TCCR1B, r18
                                 	;ldi r18, 1<<TOIE1
0000c9 2722                      	clr r18
0000ca 9320 006f                 	sts TIMSK1, r18
                                 
0000cc ef00                      	ldi temp1, PORTADIR ;keypad setup
0000cd 9300 010a                 	sts DDRL, temp1 ; PA7:4/PA3:0, out/in
                                 
0000cf 9478                      	sei
                                 
0000d0 e302
0000d1 d415
0000d2 d41d                      	do_lcd_data '2'
0000d3 e301
0000d4 d412
0000d5 d41a                      	do_lcd_data '1'
0000d6 e302
0000d7 d40f
0000d8 d417                      	do_lcd_data '2'
0000d9 e301
0000da d40c
0000db d414                      	do_lcd_data '1'
0000dc e200
0000dd d409
0000de d411                      	do_lcd_data ' '
0000df e301
0000e0 d406
0000e1 d40e                      	do_lcd_data '1'
0000e2 e307
0000e3 d403
0000e4 d40b                      	do_lcd_data '7'
0000e5 e703
0000e6 d400
0000e7 d408                      	do_lcd_data 's'
0000e8 e301
0000e9 d3fd
0000ea d405                      	do_lcd_data '1'
0000eb e200
0000ec d3fa
0000ed d402                      	do_lcd_data ' '
0000ee e200
0000ef d3f7
0000f0 d3ff                      	do_lcd_data ' '
0000f1 e200
0000f2 d3f4
0000f3 d3fc                      	do_lcd_data ' '
0000f4 e405
0000f5 d3f1
0000f6 d3f9                      	do_lcd_data 'E'
0000f7 e304
0000f8 d3ee
0000f9 d3f6                      	do_lcd_data '4'
                                 
0000fa ea08
0000fb d3e4
0000fc d3f3                      	do_lcd_command 0b10101000
                                 
0000fd e506
0000fe d3e8
0000ff d3f0                      	do_lcd_data 'V'
000100 e605
000101 d3e5
000102 d3ed                      	do_lcd_data 'e'
000103 e60e
000104 d3e2
000105 d3ea                      	do_lcd_data 'n'
000106 e604
000107 d3df
000108 d3e7                      	do_lcd_data 'd'
000109 e609
00010a d3dc
00010b d3e4                      	do_lcd_data 'i'
00010c e60e
00010d d3d9
00010e d3e1                      	do_lcd_data 'n'
00010f e607
000110 d3d6
000111 d3de                      	do_lcd_data 'g'
000112 e200
000113 d3d3
000114 d3db                      	do_lcd_data ' '
000115 e40d
000116 d3d0
000117 d3d8                      	do_lcd_data 'M'
000118 e601
000119 d3cd
00011a d3d5                      	do_lcd_data 'a'
00011b e603
00011c d3ca
00011d d3d2                      	do_lcd_data 'c'
00011e e608
00011f d3c7
000120 d3cf                      	do_lcd_data 'h'
000121 e609
000122 d3c4
000123 d3cc                      	do_lcd_data 'i'
000124 e60e
000125 d3c1
000126 d3c9                      	do_lcd_data 'n'
000127 e605
000128 d3be
000129 d3c6                      	do_lcd_data 'e'
                                 
00012a c001                      	rjmp KeypadLoop
                                 
                                 halt:
00012b cfff                      	rjmp halt
                                 
                                 KeypadLoop:
                                 
00012c ee3f                      	ldi cmask, INITCOLMASK ; initial column mask
00012d 2755                      	clr col ; initial column
                                 
                                 
                                 colloop:
                                 
00012e 3054                      	cpi col, 4
00012f f3e1                      	breq KeypadLoop ; If all keys are scanned, repeat.
000130 9330 010b                 	sts PORTL, cmask ; Otherwise, scan a column.
000132 ef0f                      	ldi temp1, 0xFF ; Slow down the scan operation.
000133 950a                      	delay: dec temp1
000134 f7f1                      	brne delay  //assuming this counts down to 0 from 255, otherwise, idk.
000135 9100 0109                 	lds temp1, PINL ; Read PORTA
000137 700f                      	andi temp1, ROWMASK ; Get the keypad output value
000138 300f                      	cpi temp1, 0xF ; Check if any row is low??? 0b1101
000139 f059                      	breq nextcol ; If yes, find which row is low
00013a e021                      	ldi rmask, INITROWMASK ; Initialize for row check
00013b 2744                      	clr row ;
                                 
                                 
                                 rowloop:
                                 
00013c 3044                      	cpi row, 4
00013d f039                      	breq nextcol ; the row scan is over.
00013e 2f60                      	mov temp2, temp1
00013f 2362                      	and temp2, rmask ; check un-masked bit
000140 f049                      	breq convert ; if bit is clear, the key is pressed
000141 9543                      	inc row ; else move to the next row
000142 0f22                      	lsl rmask
000143 940c 013c                 	jmp rowloop
                                 	nextcol: ; if row scan is over
000145 0f33                      	lsl cmask
000146 9533                      	inc cmask
000147 9553                      	inc col ; increase column value
000148 940c 012e                 	jmp colloop ; go to the next column
                                 
                                 
                                 convert:
                                 
00014a 3053                      	cpi col, 3 ; If the pressed key is in col.3
00014b f059                      	breq letters ; we have a letter
                                 	; If the key is not in col.3 and
00014c 3043                      	cpi row, 3 ; If the key is in row3,
00014d f069                      	breq symbols ; we have a symbol or 0
00014e 2f04                      	mov temp1, row ; Otherwise we have a number in 1-9
00014f 0f00                      	lsl temp1
000150 0f04                      	add temp1, row
000151 0f05                      	add temp1, col ; temp1 = row*3 + col
000152 5c0f                      	subi temp1, -'1' ; Add the value of character ‘1’    //key pressed is saved as ascii
000153 30b1                      	cpi r27,1
000154 f0d1                      	breq Adminjmp
000155 940c 01ed                 	jmp checkEmpty
                                 
                                 letters:
                                 
000157 e302                      	ldi temp1, 0b00110010
000158 0f04                      	add temp1, row ; Get the ASCII value for the key
000159 940c 0171                 	jmp convert_end
                                 
                                 symbols:
                                 
00015b 3050                      	cpi col, 0 ; Check if we have a star
00015c f041                      	breq star
00015d 3051                      	cpi col, 1 ; or if we have zero
00015e f089                      	breq zero
00015f e203                      	ldi temp1, '#'
000160 30b1                      	cpi r27,1
000161 f479                      	brne convert_end
000162 2799                      	clr flag1
000163 27bb                      	clr r27
000164 c11d                      	rjmp DisplaySelectScreen2
                                 	
                                 
                                 star:
                                 
                                 	;ldi temp1,'*'
                                 	
000165 3091                      	cpi flag1,1
000166 f021                      	breq Flag2Check
                                 	
000167 e091                      	ldi flag1, 1
                                 	
000168 e071                      	ldi temp3, 1<<TOIE1 ;start timer.
000169 9370 006f                 	sts TIMSK1, temp3
                                 
                                 	Flag2Check:
00016b 30a1                      	cpi r26,1
00016c f039                      	breq adminModeInitialJump ;this mode should clear r26 and flag1
                                 	
                                 	;out PORTC, temp1 ; Write value to PORTC
00016d 940c 012c                 	jmp KeypadLoop
                                 
                                 Adminjmp:
00016f c331                      	rjmp adminMode
                                 
                                 zero:
                                 
000170 e300                      	ldi temp1, '0' ; Set to zero
                                 
                                 convert_end:
                                 
000171 b908                      	out PORTC, temp1 ; Write value to PORTC
000172 940c 012c                 	jmp KeypadLoop ; Restart KeypadLoop loop
                                 
                                 .equ LCD_RS = 7
                                 .equ LCD_E = 6
                                 .equ LCD_RW = 5
                                 .equ LCD_BE = 4
                                 
                                 .macro lcd_set
                                 sbi PORTA, @0
                                 .endmacro
                                 .macro lcd_clr
                                 cbi PORTA, @0
                                 .endmacro
                                 
                                 adminModeInitialJump:
                                 	
000174 2777                      	clr temp3
000175 9370 006f                 	sts TIMSK1, temp3
000177 2799                      	clr flag1
000178 27aa                      	clr r26
000179 940c 0404                 	jmp adminModeInitial
                                 
                                 Timer0: ;Timer overflow 0
                                 
00017b e091                      	ldi flag1,1
                                 
00017c b70f                      	in temp1, SREG
00017d 930f                      	push temp1
                                 
00017e 9513                      	inc timerCounter
                                 
00017f 3c10                      	cpi timerCounter,192
000180 f1e9                      	breq displaySelectScreen
                                 
000181 910f                      	pop temp1
000182 bf0f                      	out SREG, temp1
                                 
000183 9518                      	reti
                                 
                                 Timer1:
                                 
000184 933f                      	push cmask
000185 932f                      	push rmask
000186 930f                      	push temp1
000187 936f                      	push temp2
000188 b70f                      	in temp1,SREG
000189 930f                      	push temp1
                                 
                                 	
                                 
00018a 9513                      	inc timerCounter
                                 
                                 
00018b ee3f                      	ldi cmask, INITCOLMASK ; initial column mask
                                 
00018c 9330 010b                 	sts PORTL, cmask ; Otherwise, scan a column.
                                 	
00018e ef0f                      	ldi temp1, 0xFF ; Slow down the scan operation.
00018f 950a                      	Hashdelay: dec temp1
000190 f7f1                      	brne Hashdelay  //assuming this counts down to 0 from 255, otherwise, idk.
                                 	
000191 9100 0109                 	lds temp1, PINL ; Read PORTA
000193 700f                      	andi temp1, ROWMASK ; Get the keypad output value
000194 300f                      	cpi temp1, 0xF ; Check if any row is low???
000195 f0d1                      	breq Released ; If yes, find which row is low
                                 	
000196 e021                      	ldi rmask, INITROWMASK ; Initialize for row check
                                 
000197 0f22                      	lsl rmask
000198 0f22                      	lsl rmask
000199 0f22                      	lsl rmask
                                 
00019a 2f60                      	mov temp2, temp1
00019b 2362                      	and temp2, rmask
00019c f009                      	breq StillPressed 
                                 
00019d c012                      	rjmp Released
                                 	
                                 StillPressed:
                                 
00019e 9513                      	inc timerCounter
                                 
                                 	
00019f b918                      	out PORTC, TimerCounter
                                 	
0001a0 3119                      	cpi timerCounter, 25
0001a1 f038                      	brlo Finish
                                 		
0001a2 ef00                      	ldi temp1, 0b11110000
0001a3 b908                      	out PORTC, temp1
                                 
0001a4 e0a1                      	ldi r26,1
0001a5 2777                      	clr temp3
0001a6 9370 006f                 	sts TIMSK1, temp3
                                 
0001a8 2711                      	clr timerCounter
                                 
                                 	Finish:
                                 
0001a9 910f                      	pop temp1
0001aa bf0f                      	out SREG, temp1
0001ab 916f                      	pop temp2
0001ac 910f                      	pop temp1
0001ad 912f                      	pop rmask
0001ae 913f                      	pop cmask
                                 
0001af 9518                      	reti
                                 
                                 Released:
                                 	
0001b0 2777                      	clr temp3
0001b1 9370 006f                 	sts TIMSK1, temp3
0001b3 2799                      	clr flag1
                                 
0001b4 2711                      	clr timerCounter
                                 
0001b5 ef0f                      	ldi temp1, 0b11111111
0001b6 b908                      	out PORTC, temp1
                                 
0001b7 910f                      	pop temp1
0001b8 bf0f                      	out SREG, temp1
0001b9 916f                      	pop temp2
0001ba 910f                      	pop temp1
0001bb 912f                      	pop rmask
0001bc 913f                      	pop cmask
                                 	
0001bd 9518                      	reti
                                 
                                 displaySelectScreen:
                                 
0001be 2711                      	clr timerCounter
0001bf 2799                      	clr flag1
                                 
0001c0 2722                      	clr r18 
0001c1 9320 006e                 	sts TIMSK0, r18 ; turn off timer.
                                 
0001c3 e001
0001c4 d31b
0001c5 d32a                      	do_lcd_command 0b00000001 ; clear display
0001c6 e800
0001c7 d318
0001c8 d327                      	do_lcd_command 0b10000000 ;set cursor to addr 0 on LCD
                                 
0001c9 e503
0001ca d31c
0001cb d324                      	do_lcd_data 'S'
0001cc e605
0001cd d319
0001ce d321                      	do_lcd_data 'e'
0001cf e60c
0001d0 d316
0001d1 d31e                      	do_lcd_data 'l'
0001d2 e605
0001d3 d313
0001d4 d31b                      	do_lcd_data 'e'
0001d5 e603
0001d6 d310
0001d7 d318                      	do_lcd_data 'c'
0001d8 e704
0001d9 d30d
0001da d315                      	do_lcd_data 't'
0001db e200
0001dc d30a
0001dd d312                      	do_lcd_data ' '
0001de e609
0001df d307
0001e0 d30f                      	do_lcd_data 'i'
0001e1 e704
0001e2 d304
0001e3 d30c                      	do_lcd_data 't'
0001e4 e605
0001e5 d301
0001e6 d309                      	do_lcd_data 'e'
0001e7 e60d
0001e8 d2fe
0001e9 d306                      	do_lcd_data 'm'
                                 
0001ea 910f                      	pop temp1
0001eb bf0f                      	out SREG, temp1
                                 
0001ec 9518                      	reti
                                 
                                 
                                 checkEmpty:
                                 //temp1 is ascii
0001ed 930f                      	push temp1
0001ee 5300                      	subi temp1, '0'
0001ef 3001                      	cpi temp1, 1
0001f0 f081                      	breq check1
0001f1 3002                      	cpi temp1, 2
0001f2 f0a9                      	breq check2
0001f3 3003                      	cpi temp1, 3
0001f4 f0d1                      	breq check3
0001f5 3004                      	cpi temp1, 4
0001f6 f0f9                      	breq check4
0001f7 3005                      	cpi temp1, 5
0001f8 f121                      	breq check5
0001f9 3006                      	cpi temp1, 6
0001fa f149                      	breq check6
0001fb 3007                      	cpi temp1, 7
0001fc f171                      	breq check7
0001fd 3008                      	cpi temp1, 8
0001fe f199                      	breq check8
0001ff 3009                      	cpi temp1, 9
000200 f1c1                      	breq check9
                                 
                                 	check1:
000201 e0e0                      		ldi ZL, low(item1)
000202 e0f2                      		ldi ZH, high(item1)
000203 8160                      		ld temp2, Z
000204 910f                      		pop temp1
000205 3060                      		cpi temp2, 0
000206 f1c9                      		breq EmptyScreen
000207 c0a3                      		rjmp CoinScreen
                                 	check2:
000208 e0e2                      		ldi ZL, low(item2)
000209 e0f2                      		ldi ZH, high(item2)
00020a 8160                      		ld temp2, Z
00020b 910f                      		pop temp1
00020c 3060                      		cpi temp2, 0
00020d f191                      		breq EmptyScreen
00020e c09c                      		rjmp CoinScreen
                                 	check3:
00020f e0e4                      		ldi ZL, low(item3)
000210 e0f2                      		ldi ZH, high(item3)
000211 8160                      		ld temp2, Z
000212 910f                      		pop temp1
000213 3060                      		cpi temp2, 0
000214 f159                      		breq EmptyScreen
000215 c095                      		rjmp CoinScreen
                                 	check4:
000216 e0e6                      		ldi ZL, low(item4)
000217 e0f2                      		ldi ZH, high(item4)
000218 8160                      		ld temp2, Z
000219 910f                      		pop temp1
00021a 3060                      		cpi temp2, 0
00021b f121                      		breq EmptyScreen
00021c c08e                      		rjmp CoinScreen
                                 	check5:
00021d e0e8                      		ldi ZL, low(item5)
00021e e0f2                      		ldi ZH, high(item5)
00021f 8160                      		ld temp2, Z
000220 910f                      		pop temp1
000221 3060                      		cpi temp2, 0
000222 f0e9                      		breq EmptyScreen
000223 c087                      		rjmp CoinScreen
                                 	check6:
000224 e0ea                      		ldi ZL, low(item6)
000225 e0f2                      		ldi ZH, high(item6)
000226 8160                      		ld temp2, Z
000227 910f                      		pop temp1
000228 3060                      		cpi temp2, 0
000229 f0b1                      		breq EmptyScreen
00022a c080                      		rjmp CoinScreen
                                 	check7:
00022b e0ec                      		ldi ZL, low(item7)
00022c e0f2                      		ldi ZH, high(item7)
00022d 8160                      		ld temp2, Z
00022e 910f                      		pop temp1
00022f 3060                      		cpi temp2, 0
000230 f079                      		breq EmptyScreen
000231 c079                      		rjmp CoinScreen
                                 	check8:
000232 e0ee                      		ldi ZL, low(item8)
000233 e0f2                      		ldi ZH, high(item8)
000234 8160                      		ld temp2, Z
000235 910f                      		pop temp1
000236 3060                      		cpi temp2, 0
000237 f041                      		breq EmptyScreen
000238 c072                      		rjmp CoinScreen
                                 	check9:
000239 e1e0                      		ldi ZL, low(item9)
00023a e0f2                      		ldi ZH, high(item9)
00023b 8160                      		ld temp2, Z
00023c 910f                      		pop temp1
00023d 3060                      		cpi temp2, 0
00023e f009                      		breq EmptyScreen
00023f c06b                      		rjmp CoinScreen
                                 
                                 	
                                 EmptyScreen:
                                 		
000240 930f                      		push temp1
                                 
000241 e001
000242 d29d
000243 d2ac                      		do_lcd_command 0b00000001
000244 e40f
000245 d2a1
000246 d2a9                      		do_lcd_data 'O'
000247 e705
000248 d29e
000249 d2a6                      		do_lcd_data 'u'
00024a e704
00024b d29b
00024c d2a3                      		do_lcd_data 't'
00024d e200
00024e d298
00024f d2a0                      		do_lcd_data ' '
000250 e60f
000251 d295
000252 d29d                      		do_lcd_data 'o'
000253 e606
000254 d292
000255 d29a                      		do_lcd_data 'f'
000256 e200
000257 d28f
000258 d297                      		do_lcd_data ' '
000259 e703
00025a d28c
00025b d294                      		do_lcd_data 's'
00025c e704
00025d d289
00025e d291                      		do_lcd_data 't'
00025f e60f
000260 d286
000261 d28e                      		do_lcd_data 'o'
000262 e603
000263 d283
000264 d28b                      		do_lcd_data 'c'
000265 e60b
000266 d280
000267 d288                      		do_lcd_data 'k'
                                 
000268 ea08
000269 d276
00026a d285                      		do_lcd_command 0b10101000
00026b 910f                      		pop temp1
00026c 2f00
00026d d279
00026e d281                      		do_lcd_data_r temp1
                                 
00026f ef0f                      		ser temp1
000270 b908                      		out PORTC, temp1
000271 d2b0                      		rcall sleep_500ms
000272 2700                      		clr temp1
000273 b908                      		out PORTC, temp1
000274 d2ad                      		rcall sleep_500ms
000275 ef0f                      		ser temp1
000276 b908                      		out PORTC, temp1
000277 d2aa                      		rcall sleep_500ms
000278 2700                      		clr temp1
000279 b908                      		out PORTC, temp1
00027a d2a7                      		rcall sleep_500ms
                                 		
00027b ef0f                      		ser temp1
00027c b908                      		out PORTC, temp1
00027d d2a4                      		rcall sleep_500ms
00027e 2700                      		clr temp1
00027f b908                      		out PORTC, temp1
000280 d2a1                      		rcall sleep_500ms
                                 		
                                 		
000281 c000                      		rjmp displaySelectScreen2
                                 
                                 
                                 displaySelectScreen2:
                                 
                                 
000282 e001
000283 d25c
000284 d26b                      	do_lcd_command 0b00000001 ; clear display
000285 e800
000286 d259
000287 d268                      	do_lcd_command 0b10000000 ;set cursor to addr 0 on LCD
                                 
000288 e503
000289 d25d
00028a d265                      	do_lcd_data 'S'
00028b e605
00028c d25a
00028d d262                      	do_lcd_data 'e'
00028e e60c
00028f d257
000290 d25f                      	do_lcd_data 'l'
000291 e605
000292 d254
000293 d25c                      	do_lcd_data 'e'
000294 e603
000295 d251
000296 d259                      	do_lcd_data 'c'
000297 e704
000298 d24e
000299 d256                      	do_lcd_data 't'
00029a e200
00029b d24b
00029c d253                      	do_lcd_data ' '
00029d e609
00029e d248
00029f d250                      	do_lcd_data 'i'
0002a0 e704
0002a1 d245
0002a2 d24d                      	do_lcd_data 't'
0002a3 e605
0002a4 d242
0002a5 d24a                      	do_lcd_data 'e'
0002a6 e60d
0002a7 d23f
0002a8 d247                      	do_lcd_data 'm'
                                 
0002a9 d278                      	rcall sleep_500ms
                                 
0002aa ce81                      	rjmp KeypadLoop
                                 
                                 
                                 CoinScreen:
                                 	
0002ab 930f                      	push temp1
0002ac 2722                      	clr r18 
0002ad 9320 006e                 	sts TIMSK0, r18 ; turn off timer.
                                 
0002af e001
0002b0 d22f
0002b1 d23e                      	do_lcd_command 0b00000001 ; clear display
0002b2 e800
0002b3 d22c
0002b4 d23b                      	do_lcd_command 0b10000000 ;set cursor to addr 0 on LCD
                                 
0002b5 e409
0002b6 d230
0002b7 d238                      	do_lcd_data 'I'
0002b8 e60e
0002b9 d22d
0002ba d235                      	do_lcd_data 'n'
0002bb e703
0002bc d22a
0002bd d232                      	do_lcd_data 's'
0002be e605
0002bf d227
0002c0 d22f                      	do_lcd_data 'e'
0002c1 e702
0002c2 d224
0002c3 d22c                      	do_lcd_data 'r'
0002c4 e704
0002c5 d221
0002c6 d229                      	do_lcd_data 't'
0002c7 e200
0002c8 d21e
0002c9 d226                      	do_lcd_data ' '
0002ca e603
0002cb d21b
0002cc d223                      	do_lcd_data 'c'
0002cd e60f
0002ce d218
0002cf d220                      	do_lcd_data 'o'
0002d0 e609
0002d1 d215
0002d2 d21d                      	do_lcd_data 'i'
0002d3 e60e
0002d4 d212
0002d5 d21a                      	do_lcd_data 'n'
0002d6 e703
0002d7 d20f
0002d8 d217                      	do_lcd_data 's'
0002d9 e200
0002da d20c
0002db d214                      	do_lcd_data ' '
0002dc e203
0002dd d209
0002de d211                      	do_lcd_data '#'
                                 	;subi temp1, -'1'
0002df 910f                      	pop temp1
0002e0 2f60                      	mov temp2,temp1
0002e1 930f                      	push temp1
0002e2 2f06
0002e3 d203
0002e4 d20b                      	do_lcd_data_r temp2
                                 	
0002e5 ea08
0002e6 d1f9
0002e7 d208                      	do_lcd_command 0b10101000
0002e8 c000                      	rjmp InsertCoin
                                 
                                 	
                                 
                                 	.macro HashLoop
                                 
                                 	ldi cmask, INITCOLMASK ; initial column mask
                                 	lsl cmask
                                 	lsl cmask  //third column
                                 
                                 	sts PORTL, cmask ; Otherwise, scan a column.
                                 	
                                 	ldi temp1, 0xFF ; Slow down the scan operation.
                                 	Hashdelay: dec temp1
                                 	brne Hashdelay  //assuming this counts down to 0 from 255, otherwise, idk.
                                 	
                                 	lds temp1, PINL ; Read PORTA
                                 	andi temp1, ROWMASK ; Get the keypad output value
                                 	cpi temp1, 0xF ; Check if any row is low???
                                 	breq @0 ; If yes, find which row is low
                                 	
                                 	ldi rmask, INITROWMASK ; Initialize for row check
                                 
                                 	lsl rmask
                                 	lsl rmask
                                 	lsl rmask
                                 
                                 	mov temp2, temp1
                                 	and temp2, rmask 
                                 	breq CoinReturn
                                 	
                                 	rjmp @0
                                 	.endmacro
                                 
                                 InsertCoin:
                                 	
0002e9 910f                      	pop temp1
                                 
0002ea d15d                      	rcall ReturnInventory
0002eb 8168                      	ld temp2,Y
                                 
0002ec 930f                      	push temp1
                                 
0002ed 2788                      	clr temp4
0002ee 2777                      	clr temp3
0002ef b978                      	out PORTC, temp3
0002f0 ea08
0002f1 d1ee
0002f2 d1fd                      	do_lcd_command 0b10101000
                                 	
0002f3 2f06                      	mov temp1,temp2
0002f4 5d00                      	subi temp1,-'0'
0002f5 2f00
0002f6 d1f0
0002f7 d1f8                      	do_lcd_data_r temp1
                                 
                                 	FirstZeroLoop:
0002f8 930f                      		push temp1
0002f9 936f                      		push temp2
                                 
0002fa ee3f
0002fb 0f33
0002fc 0f33
0002fd 9330 010b
0002ff ef0f
000300 950a
000301 f7f1
000302 9100 0109
000304 700f
000305 300f
000306 f041
000307 e021
000308 0f22
000309 0f22
00030a 0f22
00030b 2f60
00030c 2362
00030d f141
00030e c000                      		HashLoop Loop2c
                                 		Loop2c:
                                 
00030f 916f                      		pop temp2 
000310 910f                      		pop temp1 
                                 
000311 9100 0106                 		lds temp1, PINK
000313 7001                      		andi temp1, 0b00000001
                                 		
                                 
000314 3000                      		cpi temp1, 0
000315 f711                      		brne FirstZeroLoop
000316 c000                      		rjmp SecondOneLoop
                                 
                                 	SecondOneLoop:
                                 
000317 9100 0106                 		lds temp1, PINK
                                 		
000319 930f                      		push temp1
00031a 936f                      		push temp2
                                 
00031b ee3f
00031c 0f33
00031d 0f33
00031e 9330 010b
000320 ef0f
000321 950a
000322 f7f1
000323 9100 0109
000325 700f
000326 300f
000327 f041
000328 e021
000329 0f22
00032a 0f22
00032b 0f22
00032c 2f60
00032d 2362
00032e f039
00032f c000                      		HashLoop Loopc
                                 		Loopc:
                                 		
000330 916f                      		pop temp2 
000331 910f                      		pop temp1 
                                 
000332 7001                      		andi temp1, 0b00000001
000333 3001                      		cpi temp1, 1
000334 f711                      		brne SecondOneLoop
000335 c011                      		rjmp ThirdZeroLoop 
                                 
                                 	CoinReturn:
                                 
000336 3080                      		cpi temp4,0
000337 f071                      		breq JumpDisplay
000338 958a                      		dec temp4
                                 	
000339 ef0f                      		ser temp1					
00033a 9300 0099                 		sts OCR3AH, temp1
00033c 9300 0098                 		sts OCR3AL, temp1
                                 	
00033e d1dc                      		rcall sleep_250ms
                                 
00033f 2700                      		clr temp1					
000340 9300 0099                 		sts OCR3AH, temp1
000342 9300 0098                 		sts OCR3AL, temp1
                                 	
000344 d1d6                      		rcall sleep_250ms
000345 cff0                      		rjmp CoinReturn
                                 
                                 		JumpDisplay:
000346 cf3b                      		rjmp displaySelectScreen2
                                 		
                                 	ThirdZeroLoop:
                                 
000347 930f                      		push temp1
000348 936f                      		push temp2
                                 			
000349 ee3f
00034a 0f33
00034b 0f33
00034c 9330 010b
00034e ef0f
00034f 950a
000350 f7f1
000351 9100 0109
000353 700f
000354 300f
000355 f041
000356 e021
000357 0f22
000358 0f22
000359 0f22
00035a 2f60
00035b 2362
00035c f2c9
00035d c000                      		HashLoop Loop3c
                                 		Loop3c:
                                 			
00035e 916f                      		pop temp2
00035f 910f                      		pop temp1 
                                 
000360 9100 0106                 		lds temp1, PINK
000362 7001                      		andi temp1, 0b00000001
                                 		
                                 
000363 3000                      		cpi temp1, 0
000364 f711                      		brne ThirdZeroLoop
                                 		
000365 9583                      		inc temp4
                                 		
000366 956a                      		dec temp2
                                 		
000367 2f06                      		mov temp1,temp2
000368 5d00                      		subi temp1,-'0'
000369 0f77                      		lsl temp3
00036a 6071                      		ori temp3, 0b00000001
                                 
00036b 930f                      		push temp1
                                 
00036c b978                      		out PORTC, temp3
00036d ea08
00036e d171
00036f d180                      		do_lcd_command 0b10101000
                                 		
000370 910f                      		pop temp1
000371 2f00
000372 d174
000373 d17c                      		do_lcd_data_r temp1
000374 3060                      		cpi temp2, 0
000375 f009                      		breq DeliverScreen
000376 cf81                      		rjmp FirstZeroLoop
                                 		 
                                 
                                 
                                 DeliverScreen:
                                 	;cli  //disable all input related interrupts
                                 	
000377 ef0f                      	ser temp1
000378 b90d                      	out DDRE, temp1
000379 b907                      	out DDRC, temp1
                                 	
                                 	;ldi temp1,0b10101010
                                 	;out PORTC, temp1
00037a e001
00037b d164
00037c d173                      	do_lcd_command 0b00000001
00037d e404
00037e d168
00037f d170                      	do_lcd_data 'D'
000380 e605
000381 d165
000382 d16d                      	do_lcd_data 'e'
000383 e60c
000384 d162
000385 d16a                      	do_lcd_data 'l'
000386 e609
000387 d15f
000388 d167                      	do_lcd_data 'i'
000389 e706
00038a d15c
00038b d164                      	do_lcd_data 'v'
00038c e605
00038d d159
00038e d161                      	do_lcd_data 'e'
00038f e702
000390 d156
000391 d15e                      	do_lcd_data 'r'
000392 e609
000393 d153
000394 d15b                      	do_lcd_data 'i'
000395 e60e
000396 d150
000397 d158                      	do_lcd_data 'n'
000398 e607
000399 d14d
00039a d155                      	do_lcd_data 'g'
00039b e200
00039c d14a
00039d d152                      	do_lcd_data ' '
00039e e409
00039f d147
0003a0 d14f                      	do_lcd_data 'I'
0003a1 e704
0003a2 d144
0003a3 d14c                      	do_lcd_data 't'
0003a4 e605
0003a5 d141
0003a6 d149                      	do_lcd_data 'e'
0003a7 e60d
0003a8 d13e
0003a9 d146                      	do_lcd_data 'm'
                                 
0003aa 916f                      	pop temp2
0003ab 5360                      	subi temp2, '0'
                                 
0003ac d00e                      	rcall decrementInventory
                                 
0003ad ef0f                      	ser temp1					; connected to PE4 (externally labelled PE2)
0003ae 9300 0099                 	sts OCR3AH, temp1
0003b0 9300 0098                 	sts OCR3AL, temp1
                                 
0003b2 d175                      	rcall sleep_1000ms
0003b3 d174                      	rcall sleep_1000ms
0003b4 d173                      	rcall sleep_1000ms
                                 
0003b5 2700                      	clr temp1					; connected to PE4 (externally labelled PE2)
0003b6 9300 0099                 	sts OCR3AH, temp1
0003b8 9300 0098                 	sts OCR3AL, temp1
                                 
0003ba cec7                      	rjmp displaySelectScreen2
                                 
                                 
                                 	
                                 decrementInventory:
                                 	
0003bb 3061                      	cpi temp2, 1
0003bc f089                      	breq decrement1
0003bd 3062                      	cpi temp2, 2
0003be f0a9                      	breq decrement2
0003bf 3063                      	cpi temp2, 3
0003c0 f0c9                      	breq decrement3
0003c1 3064                      	cpi temp2, 4
0003c2 f0e9                      	breq decrement4
0003c3 3065                      	cpi temp2, 5
0003c4 f109                      	breq decrement5
0003c5 3066                      	cpi temp2, 6
0003c6 f129                      	breq decrement6
0003c7 3067                      	cpi temp2, 7
0003c8 f149                      	breq decrement7
0003c9 3068                      	cpi temp2, 8
0003ca f169                      	breq decrement8
0003cb 3069                      	cpi temp2, 9
0003cc f189                      	breq decrement9
0003cd 9508                      	ret
                                 	
                                 	decrement1:
                                 		
0003ce e0e0                      		ldi ZL, low(item1)
0003cf e0f2                      		ldi ZH, high(item1)
0003d0 8100                      		ld temp1, Z
                                 		
                                 		
0003d1 950a                      		dec temp1
                                 		//out PORTC, temp1
0003d2 8300                      		st Z, temp1
                                 
0003d3 9508                      		ret
                                 	decrement2:
                                 		
0003d4 e0e2                      		ldi ZL, low(item2)
0003d5 e0f2                      		ldi ZH, high(item2)
0003d6 8100                      		ld temp1, Z
                                 		
                                 		//out PORTC, temp1
                                 		
0003d7 950a                      		dec temp1
0003d8 8300                      		st Z, temp1
0003d9 9508                      		ret
                                 	
                                 	decrement3:
                                 		
0003da e0e4                      		ldi ZL, low(item3)
0003db e0f2                      		ldi ZH, high(item3)
                                 		
0003dc 8100                      		ld temp1, Z
                                 		//out PORTC, temp1
0003dd 950a                      		dec temp1
                                 
0003de 8300                      		st Z, temp1
0003df 9508                      		ret
                                 	
                                 	decrement4:
0003e0 e0e6                      		ldi ZL, low(item4)
0003e1 e0f2                      		ldi ZH, high(item4)
0003e2 8100                      		ld temp1, Z
                                 		
0003e3 950a                      		dec temp1
                                 		//out PORTC, temp1
0003e4 8300                      		st Z, temp1
0003e5 9508                      		ret
                                 
                                 	decrement5:
0003e6 e0e8                      		ldi ZL, low(item5)
0003e7 e0f2                      		ldi ZH, high(item5)
0003e8 8100                      		ld temp1, Z
                                 		
0003e9 950a                      		dec temp1
                                 		//out PORTC, temp1
0003ea 8300                      		st Z, temp1
0003eb 9508                      		ret
                                 	
                                 	decrement6:
                                 		
0003ec e0ea                      		ldi ZL, low(item6)
0003ed e0f2                      		ldi ZH, high(item6)
0003ee 8100                      		ld temp1, Z
                                 		
                                 		//out PORTC, temp1
0003ef 950a                      		dec temp1
0003f0 8300                      		st Z, temp1
0003f1 9508                      		ret
                                 	
                                 	decrement7:
                                 		
0003f2 e0ec                      		ldi ZL, low(item7)
0003f3 e0f2                      		ldi ZH, high(item7)
0003f4 8100                      		ld temp1, Z
                                 		//out PORTC, temp1
                                 
0003f5 950a                      		dec temp1
0003f6 8300                      		st Z, temp1
0003f7 9508                      		ret
                                 	
                                 	decrement8:
0003f8 e0ee                      		ldi ZL, low(item8)
0003f9 e0f2                      		ldi ZH, high(item8)
0003fa 8100                      		ld temp1, Z
                                 		//out PORTC, temp1
                                 
0003fb 950a                      		dec temp1
0003fc 8300                      		st Z, temp1
0003fd 9508                      		ret
                                 	
                                 	decrement9:
0003fe e1e0                      		ldi ZL, low(item9)
0003ff e0f2                      		ldi ZH, high(item9)
000400 8100                      		ld temp1, Z
                                 		//out PORTC, temp1
                                 
000401 950a                      		dec temp1
000402 8300                      		st Z, temp1
000403 9508                      		ret
                                 
                                 adminModeInitial:
                                 
000404 e001
000405 d0da
000406 d0e9                      	do_lcd_command 0b00000001
000407 e401
000408 d0de
000409 d0e6                      	do_lcd_data 'A'
00040a e604
00040b d0db
00040c d0e3                      	do_lcd_data 'd'
00040d e60d
00040e d0d8
00040f d0e0                      	do_lcd_data 'm'
000410 e609
000411 d0d5
000412 d0dd                      	do_lcd_data 'i'
000413 e60e
000414 d0d2
000415 d0da                      	do_lcd_data 'n'
000416 e200
000417 d0cf
000418 d0d7                      	do_lcd_data ' '
000419 e60d
00041a d0cc
00041b d0d4                      	do_lcd_data 'm'
00041c e60f
00041d d0c9
00041e d0d1                      	do_lcd_data 'o'
00041f e604
000420 d0c6
000421 d0ce                      	do_lcd_data 'd'
000422 e605
000423 d0c3
000424 d0cb                      	do_lcd_data 'e'
000425 e200
000426 d0c0
000427 d0c8                      	do_lcd_data ' '
000428 e301
000429 d0bd
00042a d0c5                      	do_lcd_data '1'
                                 	
00042b ea08
00042c d0b3
00042d d0c2                      	do_lcd_command 0b10101000
                                 
00042e 930f                      	push temp1
00042f e0e0                      	ldi ZL, low(item1)   //z holds pointer to item1's inventory.
000430 e0f2                      	ldi ZH, high(item1)
000431 8100                      	ld temp1, Z
000432 5d00                      	subi temp1, -'0'
000433 2f00
000434 d0b2
000435 d0ba                      	do_lcd_data_r temp1 
000436 b908                      	out PORTC, temp1    //since item 1 will initially have only 1 item, no conversion is needed
                                 	
000437 eb06
000438 d0a7
000439 d0b6                      	do_lcd_command 0b10110110
00043a e204
00043b d0ab
00043c d0b3                      	do_lcd_data '$'
00043d e0e1                      	ldi ZL, low(item1Cost)
00043e e0f2                      	ldi ZH, high(item1Cost)
00043f 8100                      	ld temp1, Z
000440 5d00                      	subi temp1, -'0'
000441 2f00
000442 d0a4
000443 d0ac                      	do_lcd_data_r temp1 
000444 910f                      	pop temp1
                                 
000445 e0b1                      	ldi r27,1
000446 e091                      	ldi flag1,1
                                 
000447 cce4                      	rjmp KeypadLoop
                                 
                                 
                                 returnInventory:
                                 	 
000448 930f                      	push temp1
000449 5300                      	subi temp1, '0'
00044a 3001                      	cpi temp1, 1
00044b f079                      	breq return1
00044c 3002                      	cpi temp1, 2
00044d f0a9                      	breq return2
00044e 3003                      	cpi temp1, 3
00044f f0d9                      	breq return3
000450 3004                      	cpi temp1, 4
000451 f109                      	breq return4
000452 3005                      	cpi temp1, 5
000453 f139                      	breq return5
000454 3006                      	cpi temp1, 6
000455 f169                      	breq return6
000456 3007                      	cpi temp1, 7
000457 f199                      	breq return7
000458 3008                      	cpi temp1, 8
000459 f1c9                      	breq return8
00045a c040                      	rjmp return9
                                 
                                 	return1:
00045b e0e0                      		ldi ZL, low(item1)    //inventory amount
00045c e0f2                      		ldi ZH, high(item1)
00045d e0c1                      		ldi YL, low(item1Cost) 	//item cost
00045e e0d2                      		ldi YH, high(item1Cost)	
00045f e001                      		ldi temp1, 0b00000001
000460 b908                      		out PORTC, temp1
000461 910f                      		pop temp1
000462 9508                      		ret
                                 	return2:
000463 e0e2                      		ldi ZL, low(item2)   
000464 e0f2                      		ldi ZH, high(item2)
000465 e0c3                      		ldi YL, low(item2Cost) 	//item cost
000466 e0d2                      		ldi YH, high(item2Cost)
000467 e003                      		ldi temp1, 0b00000011
000468 b908                      		out PORTC, temp1
000469 910f                      		pop temp1
00046a 9508                      		ret
                                 	return3:
00046b e0e4                      		ldi ZL, low(item3)   
00046c e0f2                      		ldi ZH, high(item3)
00046d e0c5                      		ldi YL, low(item3Cost) 	//item cost
00046e e0d2                      		ldi YH, high(item3Cost)
00046f e007                      		ldi temp1, 0b00000111
000470 b908                      		out PORTC, temp1
000471 910f                      		pop temp1
000472 9508                      		ret
                                 	return4:
000473 e0e6                      		ldi ZL, low(item4)   
000474 e0f2                      		ldi ZH, high(item4)
000475 e0c7                      		ldi YL, low(item4Cost) 	//item cost
000476 e0d2                      		ldi YH, high(item4Cost)
000477 e00f                      		ldi temp1, 0b00001111
000478 b908                      		out PORTC, temp1
000479 910f                      		pop temp1
00047a 9508                      		ret
                                 	return5:
00047b e0e8                      		ldi ZL, low(item5)   
00047c e0f2                      		ldi ZH, high(item5)
00047d e0c9                      		ldi YL, low(item5Cost) 	//item cost
00047e e0d2                      		ldi YH, high(item5Cost)
00047f e10f                      		ldi temp1, 0b00011111
000480 b908                      		out PORTC, temp1
000481 910f                      		pop temp1
000482 9508                      		ret
                                 	return6:
000483 e0ea                      		ldi ZL, low(item6)   
000484 e0f2                      		ldi ZH, high(item6)
000485 e0cb                      		ldi YL, low(item6Cost) 	//item cost
000486 e0d2                      		ldi YH, high(item6Cost)
000487 e30f                      		ldi temp1, 0b00111111
000488 b908                      		out PORTC, temp1
000489 910f                      		pop temp1
00048a 9508                      		ret
                                 	return7:
00048b e0ec                      		ldi ZL, low(item7)   
00048c e0f2                      		ldi ZH, high(item7)
00048d e0cd                      		ldi YL, low(item7Cost) 	//item cost
00048e e0d2                      		ldi YH, high(item7Cost)
00048f e70f                      		ldi temp1, 0b01111111
000490 b908                      		out PORTC, temp1
000491 910f                      		pop temp1
000492 9508                      		ret
                                 	return8:
000493 e0ee                      		ldi ZL, low(item8)   
000494 e0f2                      		ldi ZH, high(item8)
000495 e0cf                      		ldi YL, low(item8Cost) 	//item cost
000496 e0d2                      		ldi YH, high(item8Cost)
000497 ef0f                      		ldi temp1, 0b11111111
000498 b908                      		out PORTC, temp1
000499 910f                      		pop temp1
00049a 9508                      		ret
                                 	return9:
00049b e1e0                      		ldi ZL, low(item9)   
00049c e0f2                      		ldi ZH, high(item9)
00049d e1c1                      		ldi YL, low(item9Cost) 	//item cost
00049e e0d2                      		ldi YH, high(item9Cost)
00049f 910f                      		pop temp1
0004a0 9508                      		ret
                                 
                                 	
                                 
                                 adminMode:
                                 	//how does the program get here?
                                 
0004a1 930f                      	push temp1
0004a2 dfa5                      	rcall returnInventory  //itll get stuck in a loop here.
                                 
0004a3 e001
0004a4 d03b
0004a5 d04a                      	do_lcd_command 0b00000001
0004a6 e401
0004a7 d03f
0004a8 d047                      	do_lcd_data 'A'
0004a9 e604
0004aa d03c
0004ab d044                      	do_lcd_data 'd'
0004ac e60d
0004ad d039
0004ae d041                      	do_lcd_data 'm'
0004af e609
0004b0 d036
0004b1 d03e                      	do_lcd_data 'i'
0004b2 e60e
0004b3 d033
0004b4 d03b                      	do_lcd_data 'n'
0004b5 e200
0004b6 d030
0004b7 d038                      	do_lcd_data ' '
0004b8 e60d
0004b9 d02d
0004ba d035                      	do_lcd_data 'm'
0004bb e60f
0004bc d02a
0004bd d032                      	do_lcd_data 'o'
0004be e604
0004bf d027
0004c0 d02f                      	do_lcd_data 'd'
0004c1 e605
0004c2 d024
0004c3 d02c                      	do_lcd_data 'e'
0004c4 e200
0004c5 d021
0004c6 d029                      	do_lcd_data ' '
0004c7 910f                      	pop temp1
0004c8 2f00
0004c9 d01d
0004ca d025                      	do_lcd_data_r temp1 
                                 
0004cb ea08
0004cc d013
0004cd d022                      	do_lcd_command 0b10101000
                                 
0004ce 8100                      	ld temp1, Z
0004cf 5d00                      	subi temp1,-'0'
0004d0 2f00
0004d1 d015
0004d2 d01d                      	do_lcd_data_r temp1   //displays inventory of selected item
                                 	
0004d3 eb06
0004d4 d00b
0004d5 d01a                      	do_lcd_command 0b10110110
0004d6 e204
0004d7 d00f
0004d8 d017                      	do_lcd_data '$'		//displays cost of selected item
0004d9 8108                      	ld temp1, Y
0004da 5d00                      	subi temp1,-'0'
0004db 2f00
0004dc d00a
0004dd d012                      	do_lcd_data_r temp1 
                                 
                                 
0004de 940c 012c                 	jmp KeypadLoop   
                                 	
                                 	
                                 
                                 lcd_command: ; Send a command to the LCD (r16)
                                 
0004e0 bb01                      	out PORTF, r16
0004e1 d01f                      	rcall sleep_1ms
0004e2 9a16                      	lcd_set LCD_E
0004e3 d01d                      	rcall sleep_1ms
0004e4 9816                      	lcd_clr LCD_E
0004e5 d01b                      	rcall sleep_1ms
0004e6 9508                      	ret
                                 
                                 lcd_data:
                                 
0004e7 bb01                      	out PORTF, r16
0004e8 9a17                      	lcd_set LCD_RS
0004e9 d017                      	rcall sleep_1ms
0004ea 9a16                      	lcd_set LCD_E
0004eb d015                      	rcall sleep_1ms
0004ec 9816                      	lcd_clr LCD_E
0004ed d013                      	rcall sleep_1ms
0004ee 9817                      	lcd_clr LCD_RS
0004ef 9508                      	ret
                                 
                                 lcd_wait:
                                 
0004f0 930f                      	push r16
0004f1 2700                      	clr r16
0004f2 bb00                      	out DDRF, r16
0004f3 bb01                      	out PORTF, r16
0004f4 9a15                      	lcd_set LCD_RW
                                 	lcd_wait_loop:
0004f5 d00b                      	rcall sleep_1ms
0004f6 9a16                      	lcd_set LCD_E
0004f7 d009                      	rcall sleep_1ms
0004f8 b10f                      	in r16, PINF
0004f9 9816                      	lcd_clr LCD_E
0004fa fd07                      	sbrc r16, 7
0004fb cff9                      	rjmp lcd_wait_loop
0004fc 9815                      	lcd_clr LCD_RW
0004fd ef0f                      	ser r16
0004fe bb00                      	out DDRF, r16
0004ff 910f                      	pop r16
000500 9508                      	ret
                                 
                                 .equ F_CPU = 16000000
                                 .equ DELAY_1MS = F_CPU / 4 / 1000 - 4
                                 ; 4 cycles per iteration - setup/call-return overhead
                                 
                                 sleep_1ms:
                                 	
000501 938f                      	push r24
000502 939f                      	push r25
000503 e09f                      	ldi r25, high(DELAY_1MS)
000504 e98c                      	ldi r24, low(DELAY_1MS)
                                 
                                 delayloop_1ms:
                                 	
000505 9701                      	sbiw r25:r24, 1
000506 f7f1                      	brne delayloop_1ms
000507 919f                      	pop r25
000508 918f                      	pop r24
000509 9508                      	ret
                                 
                                 sleep_5ms:
                                 
00050a dff6                      	rcall sleep_1ms
00050b dff5                      	rcall sleep_1ms
00050c dff4                      	rcall sleep_1ms
00050d dff3                      	rcall sleep_1ms
00050e dff2                      	rcall sleep_1ms
00050f 9508                      	ret
                                 
                                 sleep_20ms:
                                 
000510 dff9                      	rcall sleep_5ms
000511 dff8                      	rcall sleep_5ms
000512 dff7                      	rcall sleep_5ms
000513 dff6                      	rcall sleep_5ms
000514 9508                      	ret
                                 
                                 sleep_100ms:
                                 	
000515 dffa                      	rcall sleep_20ms
000516 dff9                      	rcall sleep_20ms
000517 dff8                      	rcall sleep_20ms
000518 dff7                      	rcall sleep_20ms
000519 dff6                      	rcall sleep_20ms
00051a 9508                      	ret
                                 
                                 sleep_250ms:
00051b dff9                      	rcall sleep_100ms
00051c dff8                      	rcall sleep_100ms
00051d dff2                      	rcall sleep_20ms
00051e dff1                      	rcall sleep_20ms
00051f dfea                      	rcall sleep_5ms
000520 dfe9                      	rcall sleep_5ms
000521 9508                      	ret
                                 sleep_500ms:
                                 	
000522 dff2                      	rcall sleep_100ms
000523 dff1                      	rcall sleep_100ms
000524 dff0                      	rcall sleep_100ms
000525 dfef                      	rcall sleep_100ms
000526 dfee                      	rcall sleep_100ms
000527 9508                      	ret
                                 
                                 sleep_1000ms:
                                 
000528 dff9                      	rcall sleep_500ms
000529 dff8                      	rcall sleep_500ms
00052a 9508                      	ret


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega2560" register use summary:
x  :   0 y  :  20 z  :  30 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 441 r17:  10 r18:  43 r19:  22 r20:   8 
r21:   8 r22:  57 r23:  13 r24:   8 r25:  13 r26:   4 r27:   5 r28:  27 
r29:  27 r30:  29 r31:  29 
Registers used: 18 out of 35 (51.4%)

"ATmega2560" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   3 adiw  :   0 and   :   5 
andi  :   8 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  57 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 brlt  :   0 brmi  :   0 
brne  :  10 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   5 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  36 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :  57 cpse  :   0 dec   :  16 eicall:   0 eijmp :   0 elpm  :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :   7 jmp   :  14 ld    :  23 ldd   :   0 ldi   : 321 
lds   :   8 lpm   :   0 lsl   :  22 lsr   :   0 mov   :  18 movw  :   0 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   1 out   :  42 pop   :  46 push  :  24 rcall : 360 ret   :  29 
reti  :   6 rjmp  :  29 rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :   1 sbr   :   0 sbrc  :   1 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   9 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  27 std   :   0 sts   :  29 sub   :   0 subi  :  10 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 34 out of 116 (29.3%)

"ATmega2560" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000a56   2570      0   2570  262144   1.0%
[.dseg] 0x000200 0x000212      0     18     18    8192   0.2%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
